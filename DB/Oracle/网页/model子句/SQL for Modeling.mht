From: <ÓÉ Windows Internet Explorer 7 ±£´æ>
Subject: SQL for Modeling
Date: Mon, 25 Jul 2011 23:23:34 +0800
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----=_NextPart_000_0071_01CC4B21.DFBC3800"
X-MimeOLE: Produced By Microsoft MimeOLE V6.00.2900.6109

This is a multi-part message in MIME format.

------=_NextPart_000_0071_01CC4B21.DFBC3800
Content-Type: text/html;
	charset="Windows-1252"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://download.oracle.com/docs/cd/B19306_01/server.102/b14223/sqlmodel.htm

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" =
"http://www.w3c.org/TR/1999/REC-html401-19991224/loose.dtd">
<HTML lang=3Den xml:lang=3D"en" =
xmlns=3D"http://www.w3.org/1999/xhtml"><HEAD><TITLE>SQL for =
Modeling</TITLE>
<META http-equiv=3DContent-Type content=3D"text/html; =
charset=3Dwindows-1252">
<META http-equiv=3DContent-Language content=3Den>
<META http-equiv=3DContent-Style-Type content=3Dtext/css>
<META http-equiv=3DContent-Script-Type content=3Dtext/javascript>
<META content=3D"MSHTML 6.00.6000.20815" name=3DGENERATOR>
<META content=3D"November 4, 2005 15:57:45" name=3DDate>
<META scheme=3Dhttp://www.robotstxt.org/ content=3Dall name=3Drobots>
<META content=3D"Oracle=AE Database Data Warehousing Guide 10g Release 2 =
(10.2)"=20
name=3Ddoctitle>
<META content=3DB14223-02 name=3Dpartno>
<META content=3DDWHSG name=3Ddocid><LINK title=3DHome=20
href=3D"http://www.oracle.com/pls/db102/homepage" type=3Dtext/html =
rel=3DStart><LINK=20
title=3DCopyright href=3D"../../dcommon/html/cpyr.htm" type=3Dtext/html=20
rel=3DCopyright><LINK title=3DDefault=20
href=3D"http://download.oracle.com/docs/cd/B19306_01/dcommon/css/blafdoc.=
css"=20
type=3Dtext/css rel=3DStylesheet>
<SCRIPT=20
src=3D"http://www.oracle.com/pls/db102/doccd_js?path=3Dserver.102/b14223/=
sqlmodel.htm"=20
type=3Dtext/javascript>=0A=
</SCRIPT>
<LINK title=3DContents href=3D"toc.htm" type=3Dtext/html =
rel=3DContents><LINK=20
title=3DIndex href=3D"index.htm" type=3Dtext/html rel=3DIndex><LINK =
title=3DGlossary=20
href=3D"glossary.htm" type=3Dtext/html rel=3DGlossary><LINK =
title=3DPrevious=20
href=3D"analysis.htm" type=3Dtext/html rel=3DPrev><LINK title=3DNext =
href=3D"bi.htm"=20
type=3Dtext/html rel=3DNext><LINK title=3D"PDF version" =
href=3D"../b14223.pdf"=20
type=3Dapplication/pdf rel=3Dalternate></HEAD>
<BODY>
<DIV class=3Dheader>
<DIV class=3Dzz-skip-header><A id=3Dtop=20
href=3D"http://download.oracle.com/docs/cd/B19306_01/server.102/b14223/sq=
lmodel.htm#BEGIN"=20
name=3Dtop>Skip Headers</A></DIV>
<TABLE class=3D"simple oac_no_warn" cellSpacing=3D0 cellPadding=3D0 =
width=3D"100%"=20
summary=3D"">
  <TBODY>
  <TR>
    <TD vAlign=3Dtop align=3Dleft><B>Oracle=AE Database Data Warehousing =

      Guide<BR>10<I>g</I> Release 2 (10.2)</B><BR>Part Number =
B14223-02</TD>
    <TD vAlign=3Dbottom align=3Dright>
      <TABLE class=3D"icons oac_no_warn" cellSpacing=3D0 cellPadding=3D0 =
width=3D294=20
      summary=3D"">
        <TBODY>
        <TR>
          <TD vAlign=3Dtop align=3Dmiddle><A=20
            href=3D"http://www.oracle.com/pls/db102/homepage"><IMG =
height=3D24=20
            alt=3D"Go to Documentation Home"=20
            =
src=3D"http://download.oracle.com/docs/cd/B19306_01/dcommon/gifs/doclib.g=
if"=20
            width=3D24><BR><SPAN class=3Dicon>Home</SPAN></A></TD>
          <TD vAlign=3Dtop align=3Dmiddle><A=20
            =
href=3D"http://www.oracle.com/pls/db102/portal.all_books"><IMG=20
            height=3D24 alt=3D"Go to Book List"=20
            =
src=3D"http://download.oracle.com/docs/cd/B19306_01/dcommon/gifs/booklist=
.gif"=20
            width=3D24><BR><SPAN class=3Dicon>Book List</SPAN></A></TD>
          <TD vAlign=3Dtop align=3Dmiddle><A=20
            =
href=3D"http://download.oracle.com/docs/cd/B19306_01/server.102/b14223/to=
c.htm"><IMG=20
            height=3D24 alt=3D"Go to Table of Contents"=20
            =
src=3D"http://download.oracle.com/docs/cd/B19306_01/dcommon/gifs/toc.gif"=
=20
            width=3D24><BR><SPAN class=3Dicon>Contents</SPAN></A></TD>
          <TD vAlign=3Dtop align=3Dmiddle><A=20
            =
href=3D"http://download.oracle.com/docs/cd/B19306_01/server.102/b14223/in=
dex.htm"><IMG=20
            height=3D24 alt=3D"Go to Index"=20
            =
src=3D"http://download.oracle.com/docs/cd/B19306_01/dcommon/gifs/index.gi=
f"=20
            width=3D24><BR><SPAN class=3Dicon>Index</SPAN></A></TD>
          <TD vAlign=3Dtop align=3Dmiddle><A=20
            href=3D"http://www.oracle.com/pls/db102/show_mindex"><IMG =
height=3D24=20
            alt=3D"Go to Master Index"=20
            =
src=3D"http://download.oracle.com/docs/cd/B19306_01/dcommon/gifs/masterix=
.gif"=20
            width=3D24><BR><SPAN class=3Dicon>Master =
Index</SPAN></A></TD>
          <TD vAlign=3Dtop align=3Dmiddle><A=20
            =
href=3D"http://download.oracle.com/docs/cd/B19306_01/dcommon/html/feedbac=
k.htm"><IMG=20
            height=3D24 alt=3D"Go to Feedback page"=20
            =
src=3D"http://download.oracle.com/docs/cd/B19306_01/dcommon/gifs/feedbck2=
.gif"=20
            width=3D24><BR><SPAN class=3Dicon>Contact=20
      Us</SPAN></A></TD></TR></TBODY></TABLE></TD></TR></TBODY></TABLE>
<HR>

<TABLE class=3D"simple oac_no_warn" cellSpacing=3D0 cellPadding=3D0 =
width=3D"100%"=20
summary=3D"">
  <TBODY>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>
      <TABLE class=3D"simple oac_no_warn" cellSpacing=3D0 =
cellPadding=3D0 width=3D98=20
      summary=3D"">
        <TBODY>
        <TR>
          <TD vAlign=3Dtop align=3Dmiddle><A=20
            =
href=3D"http://download.oracle.com/docs/cd/B19306_01/server.102/b14223/an=
alysis.htm"><IMG=20
            height=3D24 alt=3D"Go to previous page"=20
            =
src=3D"http://download.oracle.com/docs/cd/B19306_01/dcommon/gifs/leftnav.=
gif"=20
            width=3D24><BR><SPAN class=3Dicon>Previous</SPAN></A></TD>
          <TD vAlign=3Dtop align=3Dmiddle><A=20
            =
href=3D"http://download.oracle.com/docs/cd/B19306_01/server.102/b14223/bi=
.htm"><IMG=20
            height=3D24 alt=3D"Go to next page"=20
            =
src=3D"http://download.oracle.com/docs/cd/B19306_01/dcommon/gifs/rightnav=
.gif"=20
            width=3D24><BR><SPAN =
class=3Dicon>Next</SPAN></A></TD></TR></TBODY></TABLE></TD>
    <TD style=3D"FONT-SIZE: 90%" vAlign=3Dtop align=3Dright><A=20
      =
href=3D"http://download.oracle.com/docs/cd/B19306_01/server.102/b14223.pd=
f">PDF</A>=20
      =B7 <A=20
      =
href=3D"http://download.oracle.com/docs/cd/B19306_01/server.102/B14223-02=
.mobi">Mobi</A>=20
      =B7 <A=20
      =
href=3D"http://download.oracle.com/docs/cd/B19306_01/server.102/B14223-02=
.epub">ePub</A></TD></TR></TBODY></TABLE><A=20
id=3DBEGIN name=3DBEGIN></A></DIV>
<DIV class=3DIND><!-- End Header --><A id=3Dg1042989 =
name=3Dg1042989></A><A=20
id=3Dsthref1855 name=3Dsthref1855></A>
<H1 class=3Dchapter><SPAN class=3Dsecnum>22</SPAN> <A id=3DDWHSG022=20
name=3DDWHSG022></A>SQL for Modeling</H1>
<P>This chapter discusses using SQL modeling, and includes:</P>
<UL>
  <LI>
  <P><A=20
  =
href=3D"http://download.oracle.com/docs/cd/B19306_01/server.102/b14223/sq=
lmodel.htm#i1006285">Overview=20
  of SQL Modeling</A></P>
  <LI>
  <P><A=20
  =
href=3D"http://download.oracle.com/docs/cd/B19306_01/server.102/b14223/sq=
lmodel.htm#BEIGEHBG">Basic=20
  Topics in SQL Modeling</A></P>
  <LI>
  <P><A=20
  =
href=3D"http://download.oracle.com/docs/cd/B19306_01/server.102/b14223/sq=
lmodel.htm#i1011729">Advanced=20
  Topics in SQL Modeling</A></P>
  <LI>
  <P><A=20
  =
href=3D"http://download.oracle.com/docs/cd/B19306_01/server.102/b14223/sq=
lmodel.htm#CHDBJDCC">Performance=20
  Considerations with SQL Modeling</A></P>
  <LI>
  <P><A=20
  =
href=3D"http://download.oracle.com/docs/cd/B19306_01/server.102/b14223/sq=
lmodel.htm#i1006326">Examples=20
  of SQL Modeling</A></P></LI></UL><A id=3Di1006285 name=3Di1006285></A>
<DIV class=3Dsect1><A id=3Dsthref1856 name=3Dsthref1856></A>
<H2 class=3Dsect1>Overview of SQL Modeling</H2>
<P>The <CODE>MODEL</CODE> clause<A id=3Dsthref1857 =
name=3Dsthref1857></A><A=20
id=3Dsthref1858 name=3Dsthref1858></A> brings a new level of power and =
flexibility=20
to SQL calculations. With the <CODE>MODEL</CODE> clause, you can create =
a=20
multidimensional array from query results and then apply formulas =
(called rules)=20
to this array to calculate new values. The rules can range from basic =
arithmetic=20
to simultaneous equations using recursion. For some applications, the=20
<CODE>MODEL</CODE> clause can replace PC-based spreadsheets. Models in =
SQL=20
leverage Oracle Database's strengths in scalability, manageability,=20
collaboration, and security. The core query engine can work with =
unlimited=20
quantities of data. By defining and executing models within the =
database, users=20
avoid transferring large data sets to and from separate modeling =
environments.=20
Models can be shared easily across workgroups, ensuring that =
calculations are=20
consistent for all applications. Just as models can be shared, access =
can also=20
be controlled precisely with Oracle's security features. With its rich=20
functionality, the <CODE>MODEL</CODE> clause can enhance all types of=20
applications.</P>
<P>The <CODE>MODEL</CODE> clause enables you to create a =
multidimensional array=20
by mapping the columns of a query into three groups: partitioning, =
dimension,=20
and measure columns. These elements perform the following tasks:</P>
<UL>
  <LI>
  <P>Partition columns define the logical blocks of the result set in a =
way=20
  similar to the partitions of the analytical functions described in <A=20
  =
href=3D"http://download.oracle.com/docs/cd/B19306_01/server.102/b14223/an=
alysis.htm#g1030987">Chapter=20
  21, "SQL for Analysis and Reporting"</A>. Rules in the =
<CODE>MODEL</CODE>=20
  clause are applied to each partition independent of other partitions. =
Thus,=20
  partitions serve as a boundary point for parallelizing the =
<CODE>MODEL</CODE>=20
  computation.</P>
  <LI>
  <P>Dimension columns define the multi-dimensional array and are used =
to=20
  identify cells within a partition. By default, a full combination of=20
  dimensions should identify just one cell in a partition. In default =
mode, they=20
  can be considered analogous to the key of a relational table.</P>
  <LI>
  <P>Measures are equivalent to the measures of a fact table in a star =
schema.=20
  They typically contain numeric values such as sales units or cost. =
Each cell=20
  is accessed by specifying its full combination of dimensions. Note =
that each=20
  partition may have a cell that matches a given combination of=20
  dimensions.</P></LI></UL>
<P>The <CODE>MODEL</CODE> clause enables you to specify rules to =
manipulate the=20
measure values of the cells in the multi-dimensional array defined by =
partition=20
and dimension columns. Rules access and update measure column values by =
directly=20
specifying dimension values. The references used in rules result in a =
highly=20
readable model. Rules are concise and flexible, and can use wild cards =
and=20
looping constructs for maximum expressiveness. Oracle evaluates the =
rules in an=20
efficient way, parallelizes the model computation whenever possible, and =

provides a seamless integration of the <CODE>MODEL</CODE> clause with =
other SQL=20
clauses. The <CODE>MODEL</CODE> clause, thus, is a scalable and =
manageable way=20
of computing business models in the database.</P>
<P><A=20
href=3D"http://download.oracle.com/docs/cd/B19306_01/server.102/b14223/sq=
lmodel.htm#i1024102">Figure=20
22-1</A> offers a conceptual overview of the modeling feature of SQL. =
The figure=20
has three parts. The top segment shows the concept of dividing a typical =
table=20
into partition, dimension, and measure columns. The middle segment shows =
two=20
rules that calculate the value of <CODE>Prod1</CODE> and =
<CODE>Prod2</CODE> for=20
the year 2002. Finally, the third part shows the output of a query that =
applies=20
the rules to such a table with hypothetical data. The unshaded output is =
the=20
original data as it is retrieved from the database, while the shaded =
output=20
shows the rows calculated by the rules. Note that results in partition=20
<CODE>A</CODE> are calculated independently from results of partition=20
<CODE>B</CODE>.</P>
<DIV class=3Dfigure>
<P class=3Dtitleinfigure><A id=3Di1024102 name=3Di1024102></A><A =
id=3Dsthref1859=20
name=3Dsthref1859></A>Figure 22-1 Model Elements</P><IMG=20
title=3D"Description of Figure 22-1 follows" height=3D507=20
alt=3D"Description of Figure 22-1 follows"=20
src=3D"http://download.oracle.com/docs/cd/B19306_01/server.102/b14223/dwh=
sg116.gif"=20
width=3D387><BR><A id=3Dsthref1860=20
href=3D"http://download.oracle.com/docs/cd/B19306_01/server.102/b14223/im=
g_text/dwhsg116.htm"=20
name=3Dsthref1860>Description of "Figure 22-1 Model =
Elements"</A><BR><BR></DIV><!-- class=3D"figure" -->
<DIV class=3Dsect2><!-- infolevel=3D"all" infotype=3D"General" --><A =
id=3Dsthref1861=20
name=3Dsthref1861></A>
<H3 class=3Dsect2>How Data is Processed in a SQL Model</H3>
<P><A=20
href=3D"http://download.oracle.com/docs/cd/B19306_01/server.102/b14223/sq=
lmodel.htm#CHDEBJIF">Figure=20
22-2</A> <A id=3Dsthref1862 name=3Dsthref1862></A>shows the flow of =
processing=20
within a simple <CODE>MODEL</CODE> clause. In this case, we will follow =
data=20
through a <CODE>MODEL</CODE> clause that includes three rules. One of =
the rules=20
updates an existing value, while the other two create new values for a =
forecast.=20
The figure shows that the rows of data retrieved by a query are fed into =
the=20
<CODE>MODEL</CODE> clause and rearranged into an array. Once the array =
is=20
defined, rules are applied one by one to the data. The shaded cells in =
<A=20
href=3D"http://download.oracle.com/docs/cd/B19306_01/server.102/b14223/sq=
lmodel.htm#CHDEBJIF">Figure=20
22-2</A> represent new data created by the rules and the cells enclosed =
by ovals=20
represent the source data for the new values. Finally, the data, =
including both=20
its updated values and newly created values, is rearranged into row form =
and=20
presented as the results of the query. Note that no data is inserted =
into any=20
table by this query.</P>
<DIV class=3Dfigure>
<P class=3Dtitleinfigure><A id=3DCHDEBJIF name=3DCHDEBJIF></A><A =
id=3Dsthref1863=20
name=3Dsthref1863></A>Figure 22-2 Model Flow Processing</P><IMG=20
title=3D"Description of Figure 22-2 follows" height=3D567=20
alt=3D"Description of Figure 22-2 follows"=20
src=3D"http://download.oracle.com/docs/cd/B19306_01/server.102/b14223/dwh=
sg120.gif"=20
width=3D500><BR><A id=3Dsthref1864=20
href=3D"http://download.oracle.com/docs/cd/B19306_01/server.102/b14223/im=
g_text/dwhsg120.htm"=20
name=3Dsthref1864>Description of "Figure 22-2 Model Flow=20
Processing"</A><BR><BR></DIV><!-- class=3D"figure" --></DIV><!-- =
class=3D"sect2" -->
<DIV class=3Dsect2><A id=3Dsthref1865 name=3Dsthref1865></A>
<H3 class=3Dsect2>Why Use SQL Modeling?</H3>
<P>Oracle modeling enables you to perform sophisticated calculations on =
your=20
data. A typical case is when you want to apply business rules to data =
and then=20
generate reports. Because Oracle Database integrates modeling =
calculations into=20
the database, performance and manageability are enhanced significantly. =
Consider=20
the following query:</P><PRE class=3Doac_no_warn =
xml:space=3D"preserve">SELECT SUBSTR(country, 1, 20) country,=20
      SUBSTR(product, 1, 15) product, year, sales
FROM sales_view
WHERE country IN ('Italy', 'Japan')
MODEL
  PARTITION BY (country) DIMENSION BY (product, year)
  MEASURES (sales sales)
  RULES=20
  (sales['Bounce', 2002] =3D sales['Bounce', 2001] + sales['Bounce', =
2000],
   sales['Y Box', 2002] =3D sales['Y Box', 2001],
   sales['All_Products', 2002] =3D sales['Bounce', 2002] + sales['Y =
Box', 2002])
ORDER BY country, product, year;

</PRE>
<P>This query partitions the data in <CODE>sales_view</CODE> (which is=20
illustrated in <A=20
href=3D"http://download.oracle.com/docs/cd/B19306_01/server.102/b14223/sq=
lmodel.htm#i1019229">"Base=20
Schema"</A>) on country so that the model computation, as defined by the =
three=20
rules, is performed on each country. This model calculates the sales of =
Bounce=20
in 2002 as the sum of its sales in 2000 and 2001, and sets the sales for =
Y Box=20
in 2002 to the same value as they were in 2001. Also, it introduces a =
new=20
product category All_Products (<CODE>sales_view</CODE> does not have the =
product=20
All_Products) for year 2002 to be the sum of sales of Bounce and Y Box =
for that=20
year. The output of this query is as follows, where bold text indicates =
new=20
values:</P><PRE class=3Doac_no_warn xml:space=3D"preserve">COUNTRY       =
       PRODUCT               YEAR      SALES
-------------------- --------------- ---------- ----------
Italy                Bounce                1999    2474.78
Italy                Bounce                2000    4333.69
Italy                Bounce                2001     4846.3
<SPAN class=3Dbold>Italy                Bounce                2002    =
9179.99</SPAN>
...
Italy                Y Box                 1999   15215.16
Italy                Y Box                 2000   29322.89
Italy                Y Box                 2001   81207.55
<SPAN class=3Dbold>Italy                Y Box                 2002   =
81207.55</SPAN>
...
<SPAN class=3Dbold>Italy                All_Products          2002   =
90387.54</SPAN>
...
Japan                Bounce                1999     2961.3
Japan                Bounce                2000    5133.53
Japan                Bounce                2001     6303.6
<SPAN class=3Dbold>Japan                Bounce                2002   =
11437.13</SPAN>
...
Japan                Y Box                 1999   22161.91
Japan                Y Box                 2000   45690.66
Japan                Y Box                 2001   89634.83
<SPAN class=3Dbold>Japan                Y Box                 2002   =
89634.83</SPAN>
...
<SPAN class=3Dbold>Japan                All_Products          2002  =
101071.96</SPAN>
...

</PRE>
<P>Note that, while the sales values for Bounce and Y Box exist in the =
input,=20
the values for All_Products are derived.</P></DIV><!-- class=3D"sect2" =
-->
<DIV class=3Dsect2><A id=3Dsthref1866 name=3Dsthref1866></A>
<H3 class=3Dsect2>SQL Modeling Capabilities</H3>
<P>Oracle Database provides the following capabilities with the=20
<CODE>MODEL</CODE> clause:</P>
<UL>
  <LI>
  <P>Cell addressing using dimension values</P>
  <P>Measure columns in individual rows are treated like cells in a=20
  multi-dimensional array and can be referenced and updated using =
dimension=20
  values. For example, in a fact table <CODE>ft(country, year, =
sales)</CODE>,=20
  you can designate <CODE>country</CODE> and <CODE>year</CODE> to be =
dimension=20
  columns and <CODE>sales</CODE> to be the measure and reference sales =
for a=20
  given country and year as <CODE>sales[country=3D'Spain', =
year=3D1999]</CODE>. This=20
  gives you the sales value for Spain in 1999. You can also use a =
shorthand form=20
  <CODE>sales['Spain', 1999]</CODE> to mean the same thing. There are a =
few=20
  semantic differences between these notations, though. See <A=20
  =
href=3D"http://download.oracle.com/docs/cd/B19306_01/server.102/b14223/sq=
lmodel.htm#i1013509">"Cell=20
  Referencing"</A> for further details.</P>
  <LI>
  <P>Symbolic array computation</P>
  <P>You can specify a series of formulas, called rules, to operate on =
the data.=20
  Rules can invoke functions on individual cells or on a set or range of =
cells.=20
  An example involving individual cells is the following:</P><PRE =
class=3Doac_no_warn =
xml:space=3D"preserve">sales[country=3D'Spain',year=3D2001] =3D =
sales['Spain',2000]+ sales['Spain',1999]

</PRE>
  <P>This sets the sales in Spain for the year 2001 to the sum of sales =
in Spain=20
  for 1999 and 2000. An example involving a range of cells is the =
following:</P><PRE class=3Doac_no_warn =
xml:space=3D"preserve">sales[country=3D'Spain',year=3D2001] =3D=20
   MAX(sales)['Spain',year BETWEEN 1997 AND 2000]

</PRE>
  <P>This sets the sales in Spain for the year 2001 equal to the maximum =
sales=20
  in Spain between 1997 and 2000.</P>
  <LI>
  <P><CODE>UPSERT</CODE>, <CODE>UPSERT</CODE> <CODE>ALL</CODE>, and=20
  <CODE>UPDATE</CODE> options</P>
  <P>Using the <CODE>UPSERT</CODE> option, which is the default, you can =
create=20
  cell values that do not exist in the input data. If the cell =
referenced exists=20
  in the data, it is updated. If the cell referenced does not exist in =
the data,=20
  and the rule uses appropriate notation, then the cell is inserted. The =

  <CODE>UPSERT</CODE> <CODE>ALL</CODE> option enables you to have=20
  <CODE>UPSERT</CODE> behavior for a wider variety of rules. The=20
  <CODE>UPDATE</CODE> option, on the other hand, would never insert any =
new=20
  cells.</P>
  <P>You can specify these options globally, in which case they apply to =
all=20
  rules, or per each rule. If you specify an option at the rule level, =
it=20
  overrides the global option. Consider the following rules:</P><PRE =
class=3Doac_no_warn xml:space=3D"preserve">UPDATE sales['Spain', 1999] =
=3D 3567.99,
UPSERT sales['Spain', 2001] =3D sales['Spain', 2000]+ sales['Spain', =
1999]

</PRE>
  <P>The first rule updates the cell for sales in Spain for 1999. The =
second=20
  rule updates the cell for sales in Spain for 2001 if it exists, =
otherwise, it=20
  creates a new cell.</P>
  <LI>
  <P>Wildcard specification of dimensions</P>
  <P>You can use <CODE>ANY</CODE> and <CODE>IS</CODE> <CODE>ANY</CODE> =
to=20
  specify all values in a dimension. As an example, consider the =
following=20
  statement:</P><PRE class=3Doac_no_warn =
xml:space=3D"preserve">sales[ANY, 2001] =3D sales['Japan', 2000]

</PRE>
  <P>This rule sets the 2001 sales of all countries equal to the sales =
value of=20
  Japan for the year 2000. All values for the dimension, including =
nulls,=20
  satisfy the <CODE>ANY</CODE> specification. You can also specify this =
using an=20
  <CODE>IS</CODE> <CODE>ANY</CODE> predicate as in the =
following:</P><PRE class=3Doac_no_warn =
xml:space=3D"preserve">sales[country IS ANY, 2001] =3D sales['Japan', =
2000]

</PRE>
  <LI>
  <P>Accessing dimension values using the <CODE>CV</CODE> function</P>
  <P>You can use the <CODE>CV</CODE> function on the right side of a =
rule to=20
  access the value of a dimension column of the cell referenced on the =
left side=20
  of a rule. It enables you to combine multiple rules performing similar =

  computation into a single rule, thus resulting in concise =
specification. For=20
  example, you can combine the following rules:</P><PRE =
class=3Doac_no_warn xml:space=3D"preserve">sales[country=3D'Spain', =
year=3D2002] =3D 1.2 * sales['Spain', 2001],
sales[country=3D'Italy', year=3D2002] =3D 1.2 * sales['Italy', 2001],
sales[country=3D'Japan', year=3D2002] =3D 1.2 * sales['Japan', 2001]

</PRE>
  <P>They can be combined into one single rule:</P><PRE =
class=3Doac_no_warn xml:space=3D"preserve">sales[country IN ('Spain', =
'Italy', 'Japan'), year=3D2002] =3D 1.2 *=20
   sales[CV(country), 2001]

</PRE>
  <P>Observe that the <CODE>CV</CODE> function passes the value for the=20
  <CODE>country</CODE> dimension from the left to the right side of the=20
rule.</P>
  <LI>
  <P>Ordered computation</P>
  <P>For rules updating a set of cells, the result may depend on the =
ordering of=20
  dimension values. You can force a particular order for the dimension =
values by=20
  specifying an <CODE>ORDER</CODE> <CODE>BY</CODE> in the rule. An =
example is=20
  the following rule:</P><PRE class=3Doac_no_warn =
xml:space=3D"preserve">sales[country IS ANY, year BETWEEN 2000 AND 2003] =
ORDER BY year =3D=20
  1.05 * sales[CV(country), CV(year)-1]

</PRE>
  <P>This ensures that the years are referenced in increasing =
chronological=20
  order.</P>
  <LI>
  <P>Automatic rule ordering</P>
  <P>Rules in the <CODE>MODEL</CODE> clause can be automatically ordered =
based=20
  on dependencies among the cells using the <CODE>AUTOMATIC</CODE>=20
  <CODE>ORDER</CODE> keywords. For example, in the following =
assignments, the=20
  last two rules will be processed before the first rule because the =
first=20
  depends on the second and third:</P><PRE class=3Doac_no_warn =
xml:space=3D"preserve">RULES AUTOMATIC ORDER
{sales[c=3D'Spain', y=3D2001] =3D sales[c=3D'Spain', y=3D2000]=20
  + sales[c=3D'Spain', y=3D1999]
sales[c=3D'Spain', y=3D2000] =3D 50000,
sales[c=3D'Spain', y=3D1999] =3D 40000}

</PRE>
  <LI>
  <P>Iterative rule evaluation</P>
  <P>You can specify iterative rule evaluation, in which case the rules =
are=20
  evaluated iteratively until the termination condition is satisfied. =
Consider=20
  the following specification:</P><PRE class=3Doac_no_warn =
xml:space=3D"preserve">MODEL DIMENSION BY (x) MEASURES (s)
  RULES ITERATE (4) (s[x=3D1] =3D s[x=3D1]/2)

</PRE>
  <P>This statement specifies that the formula <CODE>s[x=3D1] =3D =
s[x=3D1]/2</CODE>=20
  evaluation be repeated four times. The number of iterations is =
specified in=20
  the <CODE>ITERATE</CODE> option of the <CODE>MODEL</CODE> clause. It =
is also=20
  possible to specify a termination condition by using an =
<CODE>UNTIL</CODE>=20
  clause.</P>
  <P>Iterative rule evaluation is an important tool for modeling =
recursive=20
  relationships between entities in a business application. For example, =
a loan=20
  amount might depend on the interest rate where the interest rate in =
turn=20
  depends on the amount of the loan.</P>
  <LI>
  <P>Reference models</P>
  <P>A model can include multiple ref models, which are read-only =
arrays. Rules=20
  can reference cells from different reference models. Rules can update =
or=20
  insert cells in only one multi-dimensional array, which is called the =
main=20
  model. The use of reference models enables you to relate models with =
different=20
  dimensionality. For example, assume that, in addition to the fact =
table=20
  <CODE>ft(country, year, sales)</CODE>, you have a table with currency=20
  conversion ratios <CODE>cr(country, ratio)</CODE> with =
<CODE>country</CODE> as=20
  the dimension column and <CODE>ratio</CODE> as the measure. Each row =
in this=20
  table gives the conversion ratio of that country's currency to that of =
US=20
  dollar. These two tables could be used in rules such as the =
following:</P><PRE class=3Doac_no_warn =
xml:space=3D"preserve">dollar_sales['Spain',2001] =3D =
sales['Spain',2000] * ratio['Spain']

</PRE>
  <LI>
  <P>Scalable computation</P>
  <P>You can partition data and evaluate rules within each partition =
independent=20
  of other partitions. This enables parallelization of model computation =
based=20
  on partitions. For example, consider the following model:</P><PRE =
class=3Doac_no_warn xml:space=3D"preserve">MODEL PARTITION BY (country) =
DIMENSION BY (year) MEASURES (sales)
  (sales[year=3D2001] =3D AVG(sales)[year BETWEEN 1990 AND 2000]

</PRE>
  <P>The data is partitioned by country and, within each partition, you =
can=20
  compute the sales in 2001 to be the average of sales in the years =
between 1990=20
  and 2000. Partitions can be processed in parallel and this results in =
a=20
  scalable execution of the model.</P></LI></UL></DIV><!-- =
class=3D"sect2" --></DIV><!-- class=3D"sect1" --><A=20
id=3DBEIGEHBG name=3DBEIGEHBG></A>
<DIV class=3Dsect1><A id=3Dsthref1867 name=3Dsthref1867></A>
<H2 class=3Dsect1>Basic Topics in SQL Modeling</H2>
<P>This section introduces some of the basic ideas and uses for models, =
and=20
includes:</P>
<UL>
  <LI>
  <P><A=20
  =
href=3D"http://download.oracle.com/docs/cd/B19306_01/server.102/b14223/sq=
lmodel.htm#i1019229">Base=20
  Schema</A></P>
  <LI>
  <P><A=20
  =
href=3D"http://download.oracle.com/docs/cd/B19306_01/server.102/b14223/sq=
lmodel.htm#i1011667">MODEL=20
  Clause Syntax</A></P>
  <LI>
  <P><A=20
  =
href=3D"http://download.oracle.com/docs/cd/B19306_01/server.102/b14223/sq=
lmodel.htm#i1013919">Keywords=20
  in SQL Modeling</A></P>
  <LI>
  <P><A=20
  =
href=3D"http://download.oracle.com/docs/cd/B19306_01/server.102/b14223/sq=
lmodel.htm#i1013509">Cell=20
  Referencing</A></P>
  <LI>
  <P><A=20
  =
href=3D"http://download.oracle.com/docs/cd/B19306_01/server.102/b14223/sq=
lmodel.htm#BEIIDDJD">Rules</A></P>
  <LI>
  <P><A=20
  =
href=3D"http://download.oracle.com/docs/cd/B19306_01/server.102/b14223/sq=
lmodel.htm#BEIFADIG">Order=20
  of Evaluation of Rules</A></P>
  <LI>
  <P><A=20
  =
href=3D"http://download.oracle.com/docs/cd/B19306_01/server.102/b14223/sq=
lmodel.htm#BEIJBDGG">Global=20
  and Local Keywords for Rules</A></P>
  <LI>
  <P><A=20
  =
href=3D"http://download.oracle.com/docs/cd/B19306_01/server.102/b14223/sq=
lmodel.htm#i1011770">UPDATE,=20
  UPSERT, and UPSERT ALL Behavior</A></P>
  <LI>
  <P><A=20
  =
href=3D"http://download.oracle.com/docs/cd/B19306_01/server.102/b14223/sq=
lmodel.htm#BEIEGFEH">Treatment=20
  of NULLs and Missing Cells</A></P>
  <LI>
  <P><A=20
  =
href=3D"http://download.oracle.com/docs/cd/B19306_01/server.102/b14223/sq=
lmodel.htm#BEIDFCBH">Reference=20
  Models</A></P></LI></UL><A id=3Di1019229 name=3Di1019229></A>
<DIV class=3Dsect2><A id=3Dsthref1868 name=3Dsthref1868></A>
<H3 class=3Dsect2>Base Schema</H3>
<P>This chapter's examples are based on the following view=20
<CODE>sales_view</CODE>, which is derived from the <CODE>sh</CODE> =
sample=20
schema.</P><PRE class=3Doac_no_warn xml:space=3D"preserve">CREATE VIEW =
sales_view AS
SELECT country_name country, prod_name product, calendar_year year,
  SUM(amount_sold) sales, COUNT(amount_sold) cnt,
  MAX(calendar_year) KEEP (DENSE_RANK FIRST ORDER BY SUM(amount_sold) =
DESC)
  OVER (PARTITION BY country_name, prod_name) best_year,
  MAX(calendar_year) KEEP (DENSE_RANK LAST ORDER BY SUM(amount_sold) =
DESC)
  OVER (PARTITION BY country_name, prod_name) worst_year
FROM sales, times, customers, countries, products
WHERE sales.time_id =3D times.time_id AND sales.prod_id =3D =
products.prod_id AND
  sales.cust_id =3Dcustomers.cust_id AND =
customers.country_id=3Dcountries.country_id
GROUP BY country_name, prod_name, calendar_year;

</PRE>
<P>This query computes <CODE>SUM</CODE> and <CODE>COUNT</CODE> =
aggregates on the=20
sales data grouped by country, product, and year. It will report for =
each=20
product sold in a country, the year when the sales were the highest for =
that=20
product in that country. This is called the <CODE>best_year</CODE> of =
the=20
product. Similarly, <CODE>worst_year</CODE> gives the year when the =
sales were=20
the lowest.</P></DIV><!-- class=3D"sect2" --><A id=3Di1011667 =
name=3Di1011667></A>
<DIV class=3Dsect2><A id=3Dsthref1869 name=3Dsthref1869></A>
<H3 class=3Dsect2>MODEL Clause Syntax</H3>
<P>The <CODE>MODEL</CODE> clause enables you to define multi-dimensional =

calculations on the data in the SQL query block. In multi-dimensional=20
applications, a fact table consists of columns that uniquely identify a =
row with=20
the rest serving as dependent measures or attributes. The =
<CODE>MODEL</CODE>=20
clause lets you specify the <CODE>PARTITION</CODE>, =
<CODE>DIMENSION</CODE>, and=20
<CODE>MEASURE</CODE> columns that define the multi-dimensional array, =
the rules=20
that operate on this multi-dimensional array, and the processing =
options.</P>
<P>The <CODE>MODEL</CODE> clause contains a list of updates representing =
array=20
computation within a partition and is a part of a SQL query block. Its =
structure=20
is as follows:</P><PRE class=3Doac_no_warn xml:space=3D"preserve">MODEL
[&lt;global reference options&gt;]
[&lt;reference models&gt;]
[MAIN &lt;main-name&gt;]
  [PARTITION BY (&lt;cols&gt;)]
  DIMENSION BY (&lt;cols&gt;)
  MEASURES (&lt;cols&gt;)
  [&lt;reference options&gt;]
  [RULES]  &lt;rule options&gt;
  (&lt;rule&gt;, &lt;rule&gt;,.., &lt;rule&gt;)

  &lt;global reference options&gt; ::=3D &lt;reference options&gt; =
&lt;ret-opt&gt;
   &lt;ret-opt&gt; ::=3D RETURN {ALL|UPDATED} ROWS
  &lt;reference options&gt; ::=3D
  [IGNORE NAV | [KEEP NAV]
  [UNIQUE DIMENSION | UNIQUE SINGLE REFERENCE]
  &lt;rule options&gt; ::=3D
  [UPDATE | UPSERT | UPSERT ALL]
  [AUTOMATIC ORDER | SEQUENTIAL ORDER]
  [ITERATE (&lt;number&gt;)  [UNTIL &lt;condition&gt;]]
  &lt;reference models&gt; ::=3D REFERENCE ON &lt;ref-name&gt; ON =
(&lt;query&gt;)
  DIMENSION BY (&lt;cols&gt;) MEASURES (&lt;cols&gt;) &lt;reference =
options&gt;

</PRE>
<P>Each rule represents an assignment. Its left side references a cell =
or a set=20
of cells and the right side can contain expressions involving constants, =
host=20
variables, individual cells or aggregates over ranges of cells. For =
example,=20
consider <A=20
href=3D"http://download.oracle.com/docs/cd/B19306_01/server.102/b14223/sq=
lmodel.htm#i1019340">Example=20
22-1</A>.</P>
<DIV class=3Dexample>
<P class=3Dtitleinexample><A id=3Di1019340 name=3Di1019340></A><A =
id=3Dsthref1870=20
name=3Dsthref1870></A>Example 22-1 Simple Query with the MODEL =
Clause</P><PRE class=3Doac_no_warn xml:space=3D"preserve">SELECT =
SUBSTR(country,1,20) country, SUBSTR(product,1,15) product, year, sales
FROM sales_view
WHERE country in ('Italy', 'Japan')
MODEL
  RETURN UPDATED ROWS
  MAIN simple_model
  PARTITION BY (country)
  DIMENSION BY (product, year)
  MEASURES (sales)
  RULES
   (sales['Bounce', 2001] =3D 1000,
    sales['Bounce', 2002] =3D sales['Bounce', 2001] + sales['Bounce', =
2000],
    sales['Y Box', 2002] =3D sales['Y Box', 2001])
ORDER BY country, product, year;

</PRE>
<P>This query defines model computation on the rows from =
<CODE>sales_view</CODE>=20
for the countries Italy and Japan. This model has been given the name=20
<CODE>simple_model</CODE>. It partitions the data on country and =
defines, within=20
each partition, a two-dimensional array on product and year. Each cell =
in this=20
array holds the value of the sales measure. The first rule of this model =
sets=20
the sales of Bounce in year 2001 to 1000. The next two rules define that =
the=20
sales of Bounce in 2002 are the sum of its sales in years 2001 and 2000, =
and the=20
sales of Y Box in 2002 are same as that of the previous year 2001.</P>
<P>Specifying <CODE>RETURN</CODE> <CODE>UPDATED</CODE> <CODE>ROWS</CODE> =
makes=20
the preceding query return only those rows that are updated or inserted =
by the=20
model computation. By default or if you use <CODE>RETURN</CODE> =
<CODE>ALL</CODE>=20
<CODE>ROWS</CODE>, you would get all rows not just the ones updated or =
inserted=20
by the <CODE>MODEL</CODE> clause. The query produces the following =
output:</P><PRE class=3Doac_no_warn xml:space=3D"preserve">COUNTRY       =
       PRODUCT               YEAR      SALES
-------------------- --------------- ---------- ----------
Italy                Bounce                2001       1000
Italy                Bounce                2002    5333.69
Italy                Y Box                 2002   81207.55
Japan                Bounce                2001       1000
Japan                Bounce                2002    6133.53
Japan                Y Box                 2002   89634.83

</PRE>
<P>Note that the <CODE>MODEL</CODE> clause does not update or insert =
rows into=20
database tables. The following query illustrates this by showing that=20
<CODE>sales_view</CODE> has not been altered:</P><PRE =
class=3Doac_no_warn xml:space=3D"preserve">SELECT SUBSTR(country,1,20) =
country, SUBSTR(product,1,15) product, year, sales
FROM sales_view
WHERE country IN ('Italy', 'Japan');

COUNTRY              PRODUCT               YEAR      SALES
-------------------- --------------- ---------- ----------
Italy                Bounce                1999    2474.78
Italy                Bounce                2000    4333.69
Italy                Bounce                2001     4846.3
...

</PRE>
<P>Observe that the update of the sales value for Bounce in the 2001 =
done by=20
this <CODE>MODEL</CODE> clause is not reflected in the database. If you =
want to=20
update or insert rows in the database tables, you should use the=20
<CODE>INSERT</CODE>, <CODE>UPDATE</CODE>, or <CODE>MERGE</CODE> =
statements.</P>
<P>In the preceding example, columns are specified in the =
<CODE>PARTITION</CODE>=20
<CODE>BY</CODE>, <CODE>DIMENSION</CODE> <CODE>BY</CODE>, and=20
<CODE>MEASURES</CODE> list. You can also specify constants, host =
variables,=20
single-row functions, aggregate functions, analytical functions, or =
expressions=20
involving them as partition and dimension keys and measures. However, =
you need=20
to alias them in <CODE>PARTITION</CODE> <CODE>BY</CODE>, =
<CODE>DIMENSION</CODE>=20
<CODE>BY</CODE>, and <CODE>MEASURES</CODE> lists. You need to use =
aliases to=20
refer these expressions in the rules, <CODE>SELECT</CODE> list, and the =
query=20
<CODE>ORDER</CODE> <CODE>BY</CODE>. The following example shows how to =
use=20
expressions and aliases:</P><PRE class=3Doac_no_warn =
xml:space=3D"preserve">SELECT country, p product, year, sales, profits
FROM sales_view
WHERE country IN ('Italy', 'Japan')
MODEL
  RETURN UPDATED ROWS
  PARTITION BY (SUBSTR(country,1,20) AS country)
  DIMENSION BY (product AS p, year)
  MEASURES (sales, 0 AS profits)
  RULES
   (profits['Bounce', 2001] =3D sales['Bounce', 2001] * 0.25,
    sales['Bounce', 2002] =3D sales['Bounce', 2001] + sales['Bounce', =
2000],
    profits['Bounce', 2002] =3D sales['Bounce', 2002] * 0.35)
ORDER BY country, year;

COUNTRY   PRODUCT    YEAR   SALES         PROFITS
-------   ---------  ----   --------     --------
Italy     Bounce     2001     4846.3     1211.575
Italy     Bounce     2002    9179.99    3212.9965
Japan     Bounce     2001     6303.6       1575.9
Japan     Bounce     2002   11437.13    4002.9955

</PRE></DIV><!-- class=3D"example" -->
<P>Note that the alias "0 AS profits" initializes all cells of the =
profits=20
measure to 0. See <A class=3D"olink SQLRF"=20
href=3D"http://download.oracle.com/docs/cd/B19306_01/server.102/b14200/to=
c.htm"><SPAN=20
class=3Ditalic>Oracle Database SQL Reference</SPAN></A> for more =
information=20
regarding <CODE>MODEL</CODE> clause syntax.</P></DIV><!-- =
class=3D"sect2" --><A=20
id=3Di1013919 name=3Di1013919></A>
<DIV class=3Dsect2><A id=3Dsthref1871 name=3Dsthref1871></A>
<H3 class=3Dsect2><A id=3DDWHSG0221 name=3DDWHSG0221></A>Keywords in SQL =
Modeling</H3>
<P>This section defines <A id=3Dsthref1872 name=3Dsthref1872></A><A =
id=3Dsthref1873=20
name=3Dsthref1873></A>keywords used in SQL modeling.</P>
<DIV class=3Dsect3><A id=3Dsthref1874 name=3Dsthref1874></A>
<H4 class=3Dsect3>Assigning Values and Null Handling</H4>
<UL>
  <LI>
  <P><CODE>UPSERT</CODE></P>
  <P>This updates the measure values of existing cells. If the cells do =
not=20
  exist, and the rule has appropriate notation, they are inserted. If =
any of the=20
  cell references are symbolic, no cells are inserted.</P>
  <LI>
  <P><CODE>UPSERT</CODE> <CODE>ALL</CODE></P>
  <P>This is similar to <CODE>UPSERT</CODE>, except it allows a broader =
set of=20
  rule notation to insert new cells.</P>
  <LI>
  <P><CODE>UPDATE</CODE></P>
  <P>This updates existing cell values. If the cell values do not exist, =
no=20
  updates are done.</P>
  <LI>
  <P><CODE>IGNORE</CODE> <CODE>NAV</CODE></P>
  <P>For numeric cells, this treats values that are not available as 0. =
This=20
  means that a cell not supplied to <CODE>MODEL</CODE> by the query =
result set=20
  will be treated as a zero for the calculation. This can be used at a =
global=20
  level for all measures in a model.</P>
  <LI>
  <P><CODE>KEEP</CODE> <CODE>NAV</CODE></P>
  <P>This keeps cell values that are not available unchanged. It is =
useful for=20
  making exceptions when <CODE>IGNORE</CODE> <CODE>NAV</CODE> is =
specified at=20
  the global level. This is the default, and can be =
omitted.</P></LI></UL></DIV><!-- class=3D"sect3" -->
<DIV class=3Dsect3><A id=3Dsthref1875 name=3Dsthref1875></A>
<H4 class=3Dsect3>Calculation Definition</H4>
<UL>
  <LI>
  <P><CODE>MEASURES</CODE></P>
  <P>The set of values that are modified or created by the model.</P>
  <LI>
  <P><CODE>RULES</CODE></P>
  <P>The expressions that assign values to measures.</P>
  <LI>
  <P><CODE>AUTOMATIC</CODE> <CODE>ORDER</CODE></P>
  <P>This causes all rules to be evaluated in an order based on their =
logical=20
  dependencies.</P>
  <LI>
  <P><CODE>SEQUENTIAL</CODE> <CODE>ORDER</CODE></P>
  <P>This causes rules to be evaluated in the order they are written. =
This is=20
  the default.</P>
  <LI>
  <P><CODE>UNIQUE</CODE> <CODE>DIMENSION</CODE></P>
  <P>This is the default, and it means that the combination of=20
  <CODE>PARTITION</CODE> <CODE>BY</CODE> and <CODE>DIMENSION</CODE>=20
  <CODE>BY</CODE> columns in the <CODE>MODEL</CODE> clause must uniquely =

  identify each and every cell in the model. This uniqueness is =
explicitly=20
  verified at query execution when necessary, in which case it may =
increase=20
  processing time.</P>
  <LI>
  <P><CODE>UNIQUE</CODE> <CODE>SINGLE</CODE> <CODE>REFERENCE</CODE></P>
  <P>The <CODE>PARTITION</CODE> <CODE>BY</CODE> and =
<CODE>DIMENSION</CODE>=20
  <CODE>BY</CODE> clauses uniquely identify single point references on =
the=20
  right-hand side of the rules. This may reduce processing time by =
avoiding=20
  explicit checks for uniqueness at query execution.</P>
  <LI>
  <P><CODE>RETURN</CODE> <CODE>[ALL|UPDATED] ROWS</CODE></P>
  <P>This enables you to specify whether to return all rows selected or =
only=20
  those rows updated by the rules. The default is <CODE>ALL</CODE>, =
while the=20
  alternative is <CODE>UPDATED</CODE> =
<CODE>ROWS</CODE>.</P></LI></UL></DIV><!-- class=3D"sect3" --></DIV><!-- =
class=3D"sect2" --><A=20
id=3Di1013509 name=3Di1013509></A>
<DIV class=3Dsect2><A id=3Dsthref1876 name=3Dsthref1876></A>
<H3 class=3Dsect2>Cell Referencing</H3>
<P>In <A id=3Dsthref1877 name=3Dsthref1877></A><A id=3Dsthref1878=20
name=3Dsthref1878></A><A id=3Dsthref1879 name=3Dsthref1879></A>the =
<CODE>MODEL</CODE>=20
clause, a relation is treated as a multi-dimensional array of cells. A =
cell of=20
this multi-dimensional array contains the measure values and is indexed =
using=20
<CODE>DIMENSION</CODE> <CODE>BY</CODE> keys, within each partition =
defined by=20
the <CODE>PARTITION</CODE> <CODE>BY</CODE> keys. For example, consider =
the=20
following:</P><PRE class=3Doac_no_warn xml:space=3D"preserve">SELECT =
country, product, year, sales, best_year, best_year
FROM sales_view
MODEL=20
  PARTITION BY (country)
  DIMENSION BY (product, year)
  MEASURES (sales, best_year) =20
  (&lt;rules&gt; ..)
ORDER BY country, product, year;

</PRE>
<P>This partitions the data by country and defines within each =
partition, a=20
two-dimensional array on product and year. The cells of this array =
contain two=20
measures: <CODE>sales</CODE> and <CODE>best_year</CODE>.</P>
<P>Accessing the measure value of a cell by specifying the=20
<CODE>DIMENSION</CODE> <CODE>BY</CODE> keys constitutes a cell =
reference. An=20
example of a cell reference is as follows:</P><PRE class=3Doac_no_warn =
xml:space=3D"preserve">sales[product=3D 'Bounce', year=3D2000]

</PRE>
<P>Here, we are accessing the sales value of a cell referenced by =
product Bounce=20
and the year 2000. In a cell reference, you can specify =
<CODE>DIMENSION</CODE>=20
<CODE>BY</CODE> keys either symbolically as in the preceding cell =
reference or=20
positionally as in <CODE>sales['Bounce', 2000]</CODE>.</P>
<DIV class=3Dsect3><!-- infolevel=3D"all" infotype=3D"General" --><A =
id=3Dsthref1880=20
name=3Dsthref1880></A>
<H4 class=3Dsect3>Symbolic Dimension References</H4>
<P>A symbolic dimension reference (or symbolic reference) is one in =
which=20
<CODE>DIMENSION</CODE> <CODE>BY</CODE> key values are specified with a =
boolean=20
expression. For example, the cell reference <CODE>sales[year &gt;=3D =
2001]</CODE>=20
has a symbolic reference on the <CODE>DIMENSION</CODE> <CODE>BY</CODE> =
key year=20
and specifies all cells whose year value is greater than or equal to =
2001. An=20
example of symbolic references on product and year dimensions is=20
<CODE>sales[product =3D 'Bounce', year &gt;=3D =
2001]</CODE>.</P></DIV><!-- class=3D"sect3" -->
<DIV class=3Dsect3><!-- infolevel=3D"all" infotype=3D"General" --><A =
id=3Dsthref1881=20
name=3Dsthref1881></A>
<H4 class=3Dsect3>Positional Dimension References</H4>
<P>A positional dimension reference (or positional reference, in short) =
is a=20
constant or a constant expression specified for a dimension. For =
example, the=20
cell reference <CODE>sales['Bounce']</CODE> has a positional reference =
on the=20
product dimension and accesses sales value for the product Bounce. The =
constants=20
(or constant expressions) in a cell reference are matched to the column =
order=20
specified for <CODE>DIMENSION</CODE> <CODE>BY</CODE> keys. The following =
example=20
shows the usage of positional references on dimensions:</P><PRE =
class=3Doac_no_warn xml:space=3D"preserve">sales['Bounce', 2001]

</PRE>
<P>Assuming <CODE>DIMENSION</CODE> <CODE>BY</CODE> keys to be product =
and year=20
in that order, it accesses the sales value for Bounce and 2001.</P>
<P>Based on how they are specified, cell references are either single =
cell or=20
multi-cell reference.</P></DIV><!-- class=3D"sect3" --></DIV><!-- =
class=3D"sect2" --><A=20
id=3DBEIIDDJD name=3DBEIIDDJD></A>
<DIV class=3Dsect2><!-- infolevel=3D"all" infotype=3D"General" --><A =
id=3Dsthref1882=20
name=3Dsthref1882></A>
<H3 class=3Dsect2>Rules</H3>
<P>Mod<A id=3Dsthref1883 name=3Dsthref1883></A><A id=3Dsthref1884=20
name=3Dsthref1884></A><A id=3Dsthref1885 name=3Dsthref1885></A><A =
id=3Dsthref1886=20
name=3Dsthref1886></A>el computation is expressed in rules that =
manipulate the=20
cells of the multi-dimensional array defined by <CODE>PARTITION</CODE>=20
<CODE>BY</CODE>, <CODE>DIMENSION</CODE> <CODE>BY</CODE>, and=20
<CODE>MEASURES</CODE> clauses. A rule is an assignment statement whose =
left side=20
represents a cell or a range of cells and whose right side is an =
expression=20
involving constants, bind variables, individual cells or an aggregate =
function=20
on a range of cells. Rules can use wild cards and looping constructs for =
maximum=20
expressiveness. An example of a rule is the following:</P><PRE =
class=3Doac_no_warn xml:space=3D"preserve">sales['Bounce', 2003] =3D 1.2 =
* sales['Bounce', 2002]

</PRE>
<P>This rule says that, for the product Bounce, the sales for 2003 are =
20% more=20
than that of 2002.</P>
<P>Note that this rule refers to single cells on both the left and right =
side=20
and is relatively simple. Complex rules can be written with multi-cell=20
references, aggregates, and nested cell references. These are discussed =
in the=20
following sections.</P>
<DIV class=3Dsect3><!-- infolevel=3D"all" infotype=3D"General" --><A =
id=3Dsthref1887=20
name=3Dsthref1887></A>
<H4 class=3Dsect3>Single Cell References</H4>
<P>This type of rule involves single cell reference on the left side =
with=20
constants and single cell references on the right side. Some examples =
are the=20
following:</P><PRE class=3Doac_no_warn =
xml:space=3D"preserve">sales[product=3D'Finding Fido', year=3D2003] =3D =
100000
sales['Bounce', 2003] =3D 1.2 * sales['Bounce', 2002]
sales[product=3D'Finding Fido', year=3D2004] =3D 0.8 * sales['Standard =
Mouse Pad',
  year=3D2003] + sales['Finding Fido', 2003]
</PRE></DIV><!-- class=3D"sect3" -->
<DIV class=3Dsect3><!-- infolevel=3D"all" infotype=3D"General" --><A =
id=3Dsthref1888=20
name=3Dsthref1888></A>
<H4 class=3Dsect3>Multi-Cell References on the Right Side</H4>
<P>Multi-cell references can be used on the right side of rules, in =
which case=20
an aggregate function needs to be applied on them to convert them to a =
single=20
value. All existing aggregate functions including OLAP aggregates =
(inverse=20
percentile functions, hypothetical rank and distribution functions and =
so on)=20
and statistical aggregates (correlation, regression slope and so on), =
and=20
user-defined aggregate functions can be used. Windowing functions such =
as=20
<CODE>RANK</CODE> and <CODE>MOVING_AVG</CODE> can be used as well. For =
example,=20
the rule to compute the sales of Bounce for 2003 to be 100 more than the =
maximum=20
sales in the period 1998 to 2002 would be:</P><PRE class=3Doac_no_warn =
xml:space=3D"preserve">sales['Bounce', 2003] =3D 100 + =
MAX(sales)['Bounce', year BETWEEN 1998 AND 2002]

</PRE>
<P>The following example illustrates the usage of inverse percentile =
function=20
<CODE>PERCENTILE_DISC</CODE>. It projects Finding Fido sales for year =
2003 to be=20
30% more than the median sales for products Finding Fido, Standard Mouse =
Pad,=20
and Boat for all years prior to 2003.</P><PRE class=3Doac_no_warn =
xml:space=3D"preserve">sales[product=3D'Finding Fido', year=3D2003] =3D =
1.3 *=20
  PERCENTILE_DISC(0.5) WITHIN GROUP (ORDER BY sales) [product IN =
('Finding
  Fido','Standard Mouse Pad','Boat'), year &lt; 2003]

</PRE>
<P>Aggregate functions can appear only on the right side of rules. =
Arguments to=20
the aggregate function can be constants, bind variables, measures of the =

<CODE>MODEL</CODE> clause, or expressions involving them. For example, =
the rule=20
computes the sales of Bounce for 2003 to be the weighted average of its =
sales=20
for years from 1998 to 2002 would be:</P><PRE class=3Doac_no_warn =
xml:space=3D"preserve">sales['Bounce', 2003] =3D=20
   AVG(sales * weight)['Bounce', year BETWEEN 1998 AND 2002]
</PRE></DIV><!-- class=3D"sect3" -->
<DIV class=3Dsect3><!-- infolevel=3D"all" infotype=3D"General" --><A =
id=3Dsthref1889=20
name=3Dsthref1889></A>
<H4 class=3Dsect3>Multi-Cell References on the Left Side</H4>
<P>Rules can have multi-cell references on the left side as in the=20
following:</P><PRE class=3Doac_no_warn =
xml:space=3D"preserve">sales['Standard Mouse Pad', year &gt; 2000] =3D=20
   0.2 * sales['Finding Fido', year=3D2000]

</PRE>
<P>This rule accesses a range of cells on the left side (cells for =
product=20
Standard Mouse Pad and year greater than 2000) and assigns sales measure =
of each=20
such cell to the value computed by the right side expression. =
Computation by the=20
preceding rule is described as "sales of Standard Mouse Pad for years =
after 2000=20
is 20% of the sales of Finding Fido for year 2000". This computation is =
simple=20
in that the right side cell references and hence the right side =
expression are=20
the same for all cells referenced on the left.</P></DIV><!-- =
class=3D"sect3" -->
<DIV class=3Dsect3><!-- infolevel=3D"all" infotype=3D"General" --><A =
id=3Dsthref1890=20
name=3Dsthref1890></A>
<H4 class=3Dsect3>Use of the CV Function</H4>
<P>The use of the <CODE>CV</CODE> function provides the capability of =
relative=20
indexing where dimension values of the cell referenced on the left side =
are used=20
on the right side cell references. The <CODE>CV</CODE> function takes a=20
dimension key as its argument, so it provides the value of a=20
<CODE>DIMENSION</CODE> <CODE>BY</CODE> key of the cell currently =
referenced on=20
the left side. As an example, consider the following:</P><PRE =
class=3Doac_no_warn xml:space=3D"preserve">sales[product=3D'Standard =
Mouse Pad', year&gt;2000] =3D=20
  sales[CV(product), CV(year)] + 0.2 * sales['Finding Fido', 2000]

</PRE>
<P>When the left side references the cell Standard Mouse Pad and 2001, =
the right=20
side expression would be:</P><PRE class=3Doac_no_warn =
xml:space=3D"preserve">sales['Standard Mouse Pad', 2001] + 0.2 * =
sales['Finding Fido', 2000]

</PRE>
<P>Similarly, when the left side references the cell Standard Mouse Pad =
and=20
2002, the right side expression we would evaluate is:</P><PRE =
class=3Doac_no_warn xml:space=3D"preserve">sales['Standard Mouse Pad', =
2002] + 0.2 * sales['Finding Fido', 2000]

</PRE>
<P>It is also possible to use <CODE>CV</CODE> without any argument as in =

<CODE>CV()</CODE> and in which case, positional referencing is implied.=20
<CODE>CV()</CODE> may be used outside a cell reference, but when used in =
this=20
way its argument must contain the name of the dimension desired. You can =
also=20
write the preceding rule as:</P><PRE class=3Doac_no_warn =
xml:space=3D"preserve">sales[product=3D'Standard Mouse Pad', =
year&gt;2000] =3D=20
  sales[CV(), CV()] + 0.2 * sales['Finding Fido', 2000]

</PRE>
<P>The first <CODE>CV()</CODE> reference corresponds to =
<CODE>CV(product)</CODE>=20
and the latter corresponds to <CODE>CV(year)</CODE>. The <CODE>CV</CODE> =

function can be used only in right side cell references. Another example =
of the=20
usage of <CODE>CV</CODE> function is the following:</P><PRE =
class=3Doac_no_warn xml:space=3D"preserve">sales[product IN ('Finding =
Fido','Standard Mouse Pad','Bounce'), year=20
  BETWEEN 2002 AND 2004] =3D 2 * sales[CV(product), CV(year)-10]

</PRE>
<P>This rule says that, for products Finding Fido, Standard Mouse Pad, =
and=20
Bounce, the sales for years between 2002 and 2004 will be twice of what =
their=20
sales were 10 years ago.</P></DIV><!-- class=3D"sect3" -->
<DIV class=3Dsect3><!-- infolevel=3D"all" infotype=3D"General" --><A =
id=3Dsthref1891=20
name=3Dsthref1891></A>
<H4 class=3Dsect3>Use of the ANY Wildcard</H4>
<P>You can use the wild card <CODE>ANY</CODE> in cell references to =
match all=20
dimension values including nulls. <CODE>ANY</CODE> may be used on both =
the left=20
and right side of rules. For example, a rule for the computation "sales =
of all=20
products for 2003 are 10% more than their sales for 2002" would be the=20
following:</P><PRE class=3Doac_no_warn =
xml:space=3D"preserve">sales[product IS ANY, 2003] =3D 1.1 * =
sales[CV(product), 2002]

</PRE>
<P>Using positional references, it can also be written as:</P><PRE =
class=3Doac_no_warn xml:space=3D"preserve">sales[ANY, 2003] =3D 1.1 * =
sales[CV(), 2002]

</PRE>
<P>Note that <CODE>ANY</CODE> is treated as a symbolic reference even if =
it is=20
specified positionally, because it really means that (<CODE>dimension IS =
NOT=20
NULL OR dimension IS NULL</CODE>).</P></DIV><!-- class=3D"sect3" -->
<DIV class=3Dsect3><!-- infolevel=3D"all" infotype=3D"General" --><A =
id=3Dsthref1892=20
name=3Dsthref1892></A>
<H4 class=3Dsect3>Nested Cell References</H4>
<P>Cell references can be nested. In other words, cell references =
providing=20
dimension values can be used within a cell reference. An example, =
assuming=20
<CODE>best_year</CODE> is a measure, for nested cell reference is given =
as=20
follows:</P><PRE class=3Doac_no_warn =
xml:space=3D"preserve">sales[product=3D'Bounce', year =3D =
best_year['Bounce', 2003]]

</PRE>
<P>Here, the nested cell reference <CODE>best_year['Bounce', =
2003]</CODE>=20
provides value for the dimension key year and is used in the symbolic =
reference=20
for year. Measures <CODE>best_year</CODE> and <CODE>worst_year</CODE> =
give, for=20
each year (<CODE>y</CODE>) and product (<CODE>p</CODE>) combination, the =
year=20
for which sales of product <CODE>p</CODE> were highest or lowest. The =
following=20
rule computes the sales of Standard Mouse Pad for 2003 to be the average =
of=20
Standard Mouse Pad sales for the years in which Finding Fido sales were =
highest=20
and lowest:</P><PRE class=3Doac_no_warn =
xml:space=3D"preserve">sales['Standard Mouse Pad', 2003] =3D =
(sales[CV(), best_year['Finding Fido',
  CV(year)]] + sales[CV(), worst_year['Finding Fido', CV(year)]]) / 2

</PRE>
<P>Oracle allows only one level of nesting, and only single cell =
references can=20
be used as nested cell references. Aggregates on multi-cell references =
cannot be=20
used in nested cell references.</P></DIV><!-- class=3D"sect3" =
--></DIV><!-- class=3D"sect2" --><A=20
id=3DBEIFADIG name=3DBEIFADIG></A>
<DIV class=3Dsect2><!-- infolevel=3D"all" infotype=3D"General" --><A =
id=3Dsthref1893=20
name=3Dsthref1893></A>
<H3 class=3Dsect2>Order of Evaluation of Rules</H3>
<P>By defau<A id=3Dsthref1894 name=3Dsthref1894></A><A id=3Dsthref1895=20
name=3Dsthref1895></A>lt, rules are evaluated in the order they appear =
in the=20
<CODE>MODEL</CODE> clause. You can specify an optional keyword=20
<CODE>SEQUENTIAL</CODE> <CODE>ORDER</CODE> in the <CODE>MODEL</CODE> =
clause to=20
make such an evaluation order explicit. SQL models with sequential rule =
order of=20
evaluation are called sequential order models. For example, the =
following=20
<CODE>RULES</CODE> specification makes Oracle evaluate rules in the =
specified=20
sequence:</P><PRE class=3Doac_no_warn xml:space=3D"preserve">RULES =
SEQUENTIAL ORDER
 (sales['Bounce', 2001] =3D=20
    sales['Bounce', 2000] + sales['Bounce', 1999],   --Rule R1
  sales['Bounce', 2000] =3D 50000,                     --Rule R2
  sales['Bounce', 1999] =3D 40000)                     --Rule R3

</PRE>
<P>Alternatively, the option <CODE>AUTOMATIC</CODE> <CODE>ORDER</CODE> =
enables=20
Oracle to determine the order of evaluation of rules automatically. =
Oracle=20
examines the cell references within rules and finds dependencies among =
rules. If=20
cells referenced on the left side of rule <CODE>R1</CODE> are referenced =
on the=20
right side of another rule <CODE>R2</CODE>, then <CODE>R2</CODE> is =
considered=20
to depend on <CODE>R1</CODE>. In other words, rule <CODE>R1</CODE> =
should be=20
evaluated before rule <CODE>R2</CODE>. If you specify =
<CODE>AUTOMATIC</CODE>=20
<CODE>ORDER</CODE> in the preceding example as in:</P><PRE =
class=3Doac_no_warn xml:space=3D"preserve">RULES AUTOMATIC ORDER
 (sales['Bounce', 2001] =3D sales['Bounce', 2000] + sales['Bounce', =
1999],
  sales['Bounce', 2000] =3D 50000,
  sales['Bounce', 1999] =3D 40000)

</PRE>
<P>Rules 2 and 3 are evaluated, in some arbitrary order, before rule 1. =
This is=20
because rule 1 depends on rules 2 and 3 and hence need to be evaluated =
after=20
rules 2 and 3. The order of evaluation among second and third rules can =
be=20
arbitrary as they do not depend on one another. The order of evaluation =
among=20
rules independent of one another can be arbitrary. SQL models with an =
automatic=20
order of evaluation, as in the preceding fragment, are called automatic =
order=20
models.</P>
<P>In an automatic order model, multiple assignments to the same cell =
are not=20
allowed. In other words, measure of a cell can be assigned only once. =
Oracle=20
will return an error in such cases as results would be =
non-deterministic. For=20
example, the following rule specification will generate an error as=20
<CODE>sales['Bounce', 2001]</CODE> is assigned more than once:</P><PRE =
class=3Doac_no_warn xml:space=3D"preserve">RULES AUTOMATIC ORDER
 (sales['Bounce', 2001] =3D sales['Bounce', 2000] + sales['Bounce', =
1999],
  sales['Bounce', 2001] =3D 50000,
  sales['Bounce', 2001] =3D 40000)

</PRE>
<P>The rules assigning the sales of product Bounce for 2001 do not =
depend on one=20
another and hence, no particular evaluation order can be fixed among =
them. This=20
leads to non-deterministic results as the evaluation order is arbitrary =
-=20
<CODE>sales['Bounce', 2001]</CODE> can be 40000 or 50000 or sum of =
Bounce sales=20
for years 1999 and 2000. Oracle prevents this by disallowing multiple=20
assignments when <CODE>AUTOMATIC</CODE> <CODE>ORDER</CODE> is specified. =

However, multiple assignments are fine in sequential order models. If=20
<CODE>SEQUENTIAL</CODE> <CODE>ORDER</CODE> was specified instead of=20
<CODE>AUTOMATIC</CODE> <CODE>ORDER</CODE> in the preceding example, the =
result=20
of <CODE>sales['Bounce', 2001]</CODE> would be 40000.</P></DIV><!-- =
class=3D"sect2" --><A id=3DBEIJBDGG name=3DBEIJBDGG></A>
<DIV class=3Dsect2><!-- infolevel=3D"all" infotype=3D"General" --><A =
id=3Dsthref1896=20
name=3Dsthref1896></A>
<H3 class=3Dsect2>Global and Local Keywords for Rules</H3>
<P>You can specify an <CODE>UPDATE</CODE>, <CODE>UPSERT</CODE>,=20
<CODE>UPSERT</CODE> <CODE>ALL</CODE>, <CODE>IGNORE</CODE> =
<CODE>NAV</CODE>, and=20
<CODE>KEEP</CODE> <CODE>NAV</CODE> option at the global level in the=20
<CODE>RULES</CODE> clause in which case all rules operate in the =
respective=20
mode. These options can be specified at a local level with each rule and =
in=20
which case, they override the global behavior. For example, in the =
following=20
specification:</P><PRE class=3Doac_no_warn xml:space=3D"preserve">RULES =
UPDATE=20
(UPDATE s['Bounce',2001] =3D sales['Bounce',2000] + =
sales['Bounce',1999],
 UPSERT s['Y Box', 2001] =3D sales['Y Box', 2000] + sales['Y Box', =
1999],
   sales['Mouse Pad', 2001] =3D sales['Mouse Pad', 2000] +
   sales['Mouse Pad',1999])

</PRE>
<P>The <CODE>UPDATE</CODE> option is specified at the global level so, =
the first=20
and third rules operate in update mode. The second rule operates in =
upsert mode=20
as an <CODE>UPSERT</CODE> keyword is specified with that rule. Note that =
no=20
option was specified for the third rule and hence it inherits the update =

behavior from the global option.</P></DIV><!-- class=3D"sect2" --><A =
id=3Di1011770=20
name=3Di1011770></A>
<DIV class=3Dsect2><A id=3Dsthref1897 name=3Dsthref1897></A>
<H3 class=3Dsect2><A id=3DDWHSG0222 name=3DDWHSG0222></A>UPDATE, UPSERT, =
and UPSERT=20
ALL Behavior</H3>
<P>You <A id=3Dsthref1898 name=3Dsthref1898></A><A id=3Dsthref1899=20
name=3Dsthref1899></A><A id=3Dsthref1900 name=3Dsthref1900></A>can =
determine how cells=20
in rules behave by choosing whether to have <CODE>UPDATE</CODE>,=20
<CODE>UPSERT</CODE>, or <CODE>UPSERT</CODE> <CODE>ALL</CODE> semantics. =
By=20
default, rules in the <CODE>MODEL</CODE> clause have <CODE>UPSERT</CODE> =

semantics, though you can specify an optional <CODE>UPSERT</CODE> =
keyword to=20
make the upsert semantic explicit.</P>
<P>The following sections discuss these three types of behavior:</P>
<UL>
  <LI>
  <P><A=20
  =
href=3D"http://download.oracle.com/docs/cd/B19306_01/server.102/b14223/sq=
lmodel.htm#BEIJHCIA">UPDATE=20
  Behavior</A></P>
  <LI>
  <P><A=20
  =
href=3D"http://download.oracle.com/docs/cd/B19306_01/server.102/b14223/sq=
lmodel.htm#BEIGGGFJ">UPSERT=20
  Behavior</A></P>
  <LI>
  <P><A=20
  =
href=3D"http://download.oracle.com/docs/cd/B19306_01/server.102/b14223/sq=
lmodel.htm#BEIJAFFG">UPSERT=20
  ALL Behavior</A></P></LI></UL><A id=3DBEIJHCIA name=3DBEIJHCIA></A>
<DIV class=3Dsect3><!-- infolevel=3D"all" infotype=3D"General" --><A =
id=3Dsthref1901=20
name=3Dsthref1901></A>
<H4 class=3Dsect3>UPDATE Behavior</H4>
<P>The <CODE>UPDATE</CODE> option forces strict update mode. In this =
mode, the=20
rule is ignored if the cell it references on the left side does not =
exist. If=20
the cell referenced on the left side of a rule exists, then its measure =
is=20
updated with the value of the right side expression. Otherwise, if a =
cell=20
reference is positional, a new cell is created (that is, inserted into =
the=20
multi-dimensional array) with the measure value equal to the value of =
the right=20
side expression. If a cell reference is not positional, it will not =
insert=20
cells. Note that if there are any symbolic references in a cell's =
specification,=20
inserts are not possible in an upsert rule. For example, consider the =
following=20
rule:</P><PRE class=3Doac_no_warn xml:space=3D"preserve">sales['Bounce', =
2003] =3D sales['Bounce', 2001] + sales ['Bounce', 2002]

</PRE>
<P>The cell for product Bounce and year 2003, if it exists, gets updated =
with=20
the sum of Bounce sales for years 2001 and 2002, otherwise, it gets =
created. If=20
you had created the same rule using any symbolic references, no updates =
would be=20
performed, as in the following:</P><PRE class=3Doac_no_warn =
xml:space=3D"preserve">sales[prod=3D 'Bounce', year=3D 2003] =3D =
sales['Bounce', 2001] + sales ['Bounce', 2002]
</PRE></DIV><!-- class=3D"sect3" --><A id=3DBEIGGGFJ =
name=3DBEIGGGFJ></A>
<DIV class=3Dsect3><!-- infolevel=3D"all" infotype=3D"General" --><A =
id=3Dsthref1902=20
name=3Dsthref1902></A>
<H4 class=3Dsect3>UPSERT Behavior</H4>
<P>Using <CODE>UPSERT</CODE> creates a new cell corresponding to the one =

referenced on the left side of the rule when the cell is missing, and =
the cell=20
reference contains only positional references qualified by constants. =
Note that=20
cell references created with <CODE>FOR</CODE> loops (described in <A=20
href=3D"http://download.oracle.com/docs/cd/B19306_01/server.102/b14223/sq=
lmodel.htm#i1011729">"Advanced=20
Topics in SQL Modeling"</A>) are treated as positional references, so =
the values=20
<CODE>FOR</CODE> loops create will be used to insert new cells. Assuming =
you do=20
not have cells for years greater than 2003, consider the following =
rule:</P><PRE class=3Doac_no_warn xml:space=3D"preserve">UPSERT =
sales['Bounce', year =3D 2004] =3D 1.1 * sales['Bounce', 2002]

</PRE>
<P>This would not create any new cell because of the symbolic reference =
year =3D=20
2004. However, consider the following:</P><PRE class=3Doac_no_warn =
xml:space=3D"preserve">UPSERT sales['Bounce', 2004] =3D 1.1 * =
sales['Bounce', 2002]

</PRE>
<P>This would create a new cell for product Bounce for year 2004. On a =
related=20
note, new cells will not be created if any of the references is=20
<CODE>ANY</CODE>. This is because <CODE>ANY</CODE> is a predicate that =
qualifies=20
all dimensional values including <CODE>NULL</CODE>. If there is a =
reference=20
<CODE>ANY</CODE> for a dimension <CODE>d</CODE>, then it means the same =
thing as=20
the predicate (<CODE>d IS NOT NULL</CODE> <CODE>OR</CODE> <CODE>d IS=20
NULL)</CODE>.</P>
<P>If an <CODE>UPSERT</CODE> rule uses <CODE>FOR</CODE> loops in its =
left side=20
cell references, the list of upsert cells is generated by performing a =
cross=20
product of all the distinct values for each dimension. Although=20
<CODE>UPSERT</CODE> with <CODE>FOR</CODE> loops can be used to densify=20
dimensions (see <A=20
href=3D"http://download.oracle.com/docs/cd/B19306_01/server.102/b14223/an=
alysis.htm#i1014934">"Data=20
Densification for Reporting"</A>), it is generally preferable to densify =
using=20
the partition outer join operation.</P></DIV><!-- class=3D"sect3" --><A=20
id=3DBEIJAFFG name=3DBEIJAFFG></A>
<DIV class=3Dsect3><!-- infolevel=3D"all" infotype=3D"General" --><A =
id=3Dsthref1903=20
name=3Dsthref1903></A>
<H4 class=3Dsect3>UPSERT ALL Behavior</H4>
<P><CODE>UPSERT</CODE> <CODE>ALL</CODE> behavior allows model rules with =

existential predicates (comparisons, <CODE>IN</CODE>, <CODE>ANY</CODE>, =
and so=20
on) in their left side to have <CODE>UPSERT</CODE> behavior. As an =
example, the=20
following uses <CODE>ANY</CODE> and creates Bay Area as the combination =
of San=20
Francisco, San Jose, and Oakland:</P><PRE class=3Doac_no_warn =
xml:space=3D"preserve">SELECT product, time, city, s sales
FROM <SPAN class=3Ditalic>cube_subquery</SPAN>
MODEL PARTITION BY (product)
DIMENSION BY (time, city) MEASURES(sales s
RULES UPSERT ALL
(s[ANY, 'Bay Area'] =3D
   s[CV(), 'San Francisco'] + s[CV(), 'San Jose'] + s[CV(), 'Oakland']
s['2004', ANY] =3D s['2002', CV()] + s['2003', CV()]);

</PRE>
<P>In this example, the first rule simply inserts a Bay Area cell for =
each=20
distinct time value, and the second rule inserts a 2004 cell for each =
distinct=20
city value including Bay Area. This example is relatively simple as the=20
existential predicates used on the left side are <CODE>ANY</CODE> =
predicates,=20
but you can also use <CODE>UPSERT</CODE> <CODE>ALL</CODE> with more =
complex=20
calculations.</P>
<P>It is important to understand exactly what the <CODE>UPSERT</CODE>=20
<CODE>ALL</CODE> operation does, especially in cases where there is more =
than=20
one symbolic dimension reference. Note that the behavior is different =
than the=20
behavior of an <CODE>UPSERT</CODE> rule that uses <CODE>FOR</CODE> =
loops. When=20
evaluating an <CODE>UPSERT</CODE> <CODE>ALL</CODE> rule, Oracle performs =
the=20
following steps to create a list of cell references to be =
upserted.</P><BR>
<P class=3Dseghead><A id=3Dsthref1904 name=3Dsthref1904></A>Step 1 Find =
Cells</P>
<P>Find the existing cells that satisfy all the symbolic predicates of =
the cell=20
reference.</P><BR>
<P class=3Dseghead><A id=3Dsthref1905 name=3Dsthref1905></A>Step 2 Find =
Distinct=20
Dimension Values</P>
<P>Using just the dimensions that have symbolic references, find the =
distinct=20
dimension value combinations of these cells.</P><BR>
<P class=3Dseghead><A id=3Dsthref1906 name=3Dsthref1906></A>Step 3 =
Perform a Cross=20
Product</P>
<P>Perform a cross product of these value combinations with the =
dimension values=20
specified through positional references.</P><BR>
<P class=3Dseghead><A id=3Dsthref1907 name=3Dsthref1907></A>Step 4 =
Upsert New=20
Cells</P>
<P>The results of Step 3 are then used to upsert new cells into the =
array.</P>
<P>To illustrate these four steps, here is a brief example using =
abstracted data=20
and a model with three dimensions. Consider a model dimensioned by=20
(<CODE>product</CODE>, <CODE>time</CODE>, <CODE>city</CODE>) with a =
measure=20
called <CODE>sales</CODE>. We wish to upsert new sales values for the =
city of=20
<CODE>z</CODE>, and these sales values are copied from those of the city =
of=20
<CODE>y</CODE>.</P><PRE class=3Doac_no_warn =
xml:space=3D"preserve">UPSERT ALL sales[ANY, ANY, 'z']=3D =
sales[CV(product),CV(time),'y']

</PRE>
<P>Our source data set has these four rows:</P><PRE class=3Doac_no_warn =
xml:space=3D"preserve">PROD    TIME   CITY   SALES
   1    2002      x      10
   1    2003      x      15
   2    2002      y      21
   2    2003      y      24

</PRE>
<P>The following explains the details of the four steps, applied to this =

data:</P>
<OL>
  <LI>
  <P>Because the symbolic predicates of the rule are <CODE>ANY</CODE>, =
any of=20
  the rows shown in this example is acceptable.</P>
  <LI>
  <P>The distinct dimension combinations of cells with symbolic =
predicates that=20
  match the condition are: (1, 2002), (1, 2003), (2, 2002), and (2, =
2003).</P>
  <LI>
  <P>We find the cross product of these dimension combinations with the =
cells=20
  specified with positional references. In this case, it is simply a =
cross=20
  product with the value <CODE>z</CODE>, and the resulting cell =
references are:=20
  (1, 2002, z), (1, 2003, z), (2, 2002, z), and (2, 2003, z).</P>
  <LI>
  <P>The cells listed in Step 3 will be upserted, with sales calculated =
based on=20
  the city <CODE>y</CODE>. Because there are no values for product 1 in =
city=20
  <CODE>y</CODE>, those cells created for product 1 will have =
<CODE>NULL</CODE>=20
  as their sales value. Of course, a different rule might have generated =

  non-<CODE>NULL</CODE> results for all the new cells. Our result set =
includes=20
  the four original rows plus four new rows:</P></LI></OL><PRE =
class=3Doac_no_warn xml:space=3D"preserve">PROD    TIME   CITY    SALES
   1    2002      x       10
   1    2003      x       15
   2    2002      y       21
   2    2003      y       24
   1    2002      z     NULL
   1    2003      z     NULL
   2    2002      z       21
   2    2003      z       24

</PRE>
<P>It is important to note that these results are not a cross product =
using all=20
values of all dimensions. If that were the case, we would have cells =
such as=20
(1,2002, y) and (2,2003, x). Instead, the results here are created using =

dimension combinations found in existing=20
rows.</P></DIV><!-- class=3D"sect3" --></DIV><!-- class=3D"sect2" --><A =
id=3DBEIEGFEH=20
name=3DBEIEGFEH></A>
<DIV class=3Dsect2><!-- infolevel=3D"all" infotype=3D"General" --><A =
id=3Dsthref1908=20
name=3Dsthref1908></A>
<H3 class=3Dsect2>Treatment of NULLs and Missing Cells</H3>
<P>Applications using models would not only have to deal with =
non-deterministic=20
values for a cell measure in the form of <CODE>NULL</CODE>, but also =
with=20
non-determinism in the form of missing cells. A cell, referenced by a =
single=20
cell reference, that is missing in the data is called a missing cell. =
The=20
<CODE>MODEL</CODE> clause provides a default treatment for nulls and =
missing=20
cells that is consistent with the ANSI SQL standard and also provides =
options to=20
treat them in other useful ways according to business logic, for =
example, to=20
treat nulls as zero for arithmetic operations.</P>
<P>By default, <CODE>NULL</CODE> cell measure values are treated the =
same way as=20
nulls are treated elsewhere in SQL. For example, in the following =
rule:</P><PRE class=3Doac_no_warn xml:space=3D"preserve">sales['Bounce', =
2001] =3D sales['Bounce', 1999] + sales['Bounce', 2000]

</PRE>
<P>The right side expression would evaluate to <CODE>NULL</CODE> if =
Bounce sales=20
for one of the years 1999 and 2000 is <CODE>NULL</CODE>. Similarly, =
aggregate=20
functions in rules would treat <CODE>NULL</CODE> values in the same way =
as their=20
regular behavior where <CODE>NULL</CODE> values are ignored during=20
aggregation.</P>
<P>Missing cells are treated as cells with <CODE>NULL</CODE> measure =
values. For=20
example, in the preceding rule, if the cell for Bounce and 2000 is =
missing, then=20
it is treated as a <CODE>NULL</CODE> value and the right side expression =
would=20
evaluate to <CODE>NULL</CODE>.</P>
<DIV class=3Dsect3><!-- infolevel=3D"all" infotype=3D"General" --><A =
id=3Dsthref1909=20
name=3Dsthref1909></A>
<H4 class=3Dsect3>Distinguishing Missing Cells from NULLs</H4>
<P>The functions <CODE>PRESENTV</CODE> and <CODE>PRESENTNNV</CODE> =
enable you to=20
identify missing cells and distinguish them from <CODE>NULL</CODE> =
values. These=20
functions take a single cell reference and two expressions as arguments =
as in=20
<CODE>PRESENTV(cell, expr1, expr2)</CODE>. <CODE>PRESENTV</CODE> returns =
the=20
first expression <CODE>expr1</CODE> if the cell <CODE>cell</CODE> is =
existent in=20
the data input to the <CODE>MODEL</CODE> clause. Otherwise, it returns =
the=20
second expression <CODE>expr2</CODE>. For example, consider the =
following:</P><PRE class=3Doac_no_warn =
xml:space=3D"preserve">PRESENTV(sales['Bounce', 2000], =
1.1*sales['Bounce', 2000], 100)

</PRE>
<P>If the cell for product Bounce and year 2000 exists, it returns the=20
corresponding sales multiplied by 1.1, otherwise, it returns 100. Note =
that if=20
sales for the product Bounce for year 2000 is <CODE>NULL</CODE>, the =
preceding=20
specification would return <CODE>NULL</CODE>.</P>
<P>The <CODE>PRESENTNNV</CODE> function not only checks for the presence =
of a=20
cell but also whether it is <CODE>NULL</CODE> or not. It returns the =
first=20
expression <CODE>expr1</CODE> if the cell exists and is not =
<CODE>NULL</CODE>,=20
otherwise, it returns the second expression <CODE>expr2</CODE>. For =
example,=20
consider the following:</P><PRE class=3Doac_no_warn =
xml:space=3D"preserve">PRESENTNNV(sales['Bounce', 2000], =
1.1*sales['Bounce', 2000], 100)

</PRE>
<P>This would return <CODE>1.1*sales['Bounce', 2000]</CODE> if=20
<CODE>sales['Bounce', 2000]</CODE> exists and is not <CODE>NULL</CODE>.=20
Otherwise, it returns 100.</P>
<P>Applications can use the <CODE>IS PRESENT</CODE> predicate in their =
model to=20
check the presence of a cell in an explicit fashion.This predicate =
returns=20
<CODE>TRUE</CODE> if cell exists and <CODE>FALSE</CODE> otherwise. The =
preceding=20
example using <CODE>PRESENTNNV</CODE> can be written using =
<CODE>IS</CODE>=20
<CODE>PRESENT</CODE> as:</P><PRE class=3Doac_no_warn =
xml:space=3D"preserve">CASE WHEN sales['Bounce', 2000] IS PRESENT AND =
sales['Bounce', 2000] IS NOT NULL
THEN 1.1 * sales['Bounce', 2000]
ELSE 100
END

</PRE>
<P>The <CODE>IS PRESENT</CODE> predicate, like the <CODE>PRESENTV</CODE> =
and=20
<CODE>PRESENTNNV</CODE> functions, checks for cell existence in the =
input data,=20
that is, the data as existed before the execution of the =
<CODE>MODEL</CODE>=20
clause. This enables you to initialize multiple measures of a cell newly =

inserted by an <CODE>UPSERT</CODE> rule. For example, if you want to =
initialize=20
sales and profit values of a cell, if it does not exist in the data, for =
product=20
Bounce and year 2003 to 1000 and 500 respectively, you can do so by the=20
following:</P><PRE class=3Doac_no_warn xml:space=3D"preserve">RULES
 (UPSERT sales['Bounce', 2003] =3D
    PRESENTV(sales['Bounce', 2003], sales['Bounce', 2003], 1000),
  UPSERT profit['Bounce', 2003] =3D=20
    PRESENTV(profit['Bounce', 2003], profit['Bounce', 2003], 500))

</PRE>
<P>The <CODE>PRESENTV</CODE> functions used in this formulation return=20
<CODE>TRUE</CODE> or <CODE>FALSE</CODE> based on the existence of the =
cell in=20
the input data. If the cell for Bounce and 2003 gets inserted by one of =
the=20
rules, based on their evaluation order, <CODE>PRESENTV</CODE> function =
in the=20
other rule would still evaluate to <CODE>FALSE</CODE>. You can consider =
this=20
behavior as a preprocessing step to rule evaluation that evaluates and =
replaces=20
all <CODE>PRESENTV</CODE> and <CODE>PRESENTNNV</CODE> functions and=20
<CODE>IS</CODE> <CODE>PRESENT</CODE> predicate by their respective=20
values.</P></DIV><!-- class=3D"sect3" -->
<DIV class=3Dsect3><!-- infolevel=3D"all" infotype=3D"General" --><A =
id=3Dsthref1910=20
name=3Dsthref1910></A>
<H4 class=3Dsect3>Use Defaults for Missing Cells and NULLs</H4>
<P>The <CODE>MODEL</CODE> clause, by default, treats missing cells as =
cells with=20
<CODE>NULL</CODE> measure values. An optional <CODE>KEEP</CODE> =
<CODE>NAV</CODE>=20
keyword can be specified in the <CODE>MODEL</CODE> clause to get this=20
behavior.If your application wants to default missing cells and nulls to =
some=20
values, you can do so by using <CODE>IS</CODE> <CODE>PRESENT</CODE>,=20
<CODE>IS</CODE> <CODE>NULL</CODE> predicates and <CODE>PRESENTV</CODE>,=20
<CODE>PRESENTNNV</CODE> functions. But it may become cumbersome if you =
have lot=20
of single cell references and rules. You can use <CODE>IGNORE</CODE>=20
<CODE>NAV</CODE> option instead of the default <CODE>KEEP</CODE>=20
<CODE>NAV</CODE> option to default nulls and missing cells to:</P>
<UL>
  <LI>
  <P>0 for numeric data</P>
  <LI>
  <P>Empty string for character/string data</P>
  <LI>
  <P>01-JAN-2001 for data type data</P>
  <LI>
  <P><CODE>NULL</CODE> for all other data types</P></LI></UL>
<P>Consider the following query:</P><PRE class=3Doac_no_warn =
xml:space=3D"preserve">SELECT product, year, sales
FROM sales_view
WHERE country =3D 'Poland'
MODEL
  DIMENSION BY (product, year) MEASURES (sales sales) IGNORE NAV
  RULES UPSERT
  (sales['Bounce', 2003] =3D sales['Bounce', 2002] + sales['Bounce', =
2001]);

</PRE>
<P>In this, the input to the <CODE>MODEL</CODE> clause does not have a =
cell for=20
product Bounce and year 2002. Because of <CODE>IGNORE</CODE> =
<CODE>NAV</CODE>=20
option, <CODE>sales['Bounce', 2002]</CODE> value would default to 0 (as =
sales is=20
of numeric type) instead of <CODE>NULL</CODE>. Thus, =
<CODE>sales['Bounce',=20
2003]</CODE> value would be same as that of <CODE>sales['Bounce',=20
2001]</CODE>.</P></DIV><!-- class=3D"sect3" -->
<DIV class=3Dsect3><!-- infolevel=3D"all" infotype=3D"General" --><A =
id=3Dsthref1911=20
name=3Dsthref1911></A>
<H4 class=3Dsect3>Using NULLs in a Cell Reference</H4>
<P>To use <CODE>NULL</CODE> values in a cell reference, you must use one =
of the=20
following:</P>
<UL>
  <LI>
  <P>Positional reference using wild card <CODE>ANY</CODE> as in=20
  <CODE>sales[ANY]</CODE>.</P>
  <LI>
  <P>Symbolic reference using the <CODE>IS</CODE> <CODE>ANY</CODE> =
predicate as=20
  in <CODE>sales[product IS ANY]</CODE>.</P>
  <LI>
  <P>Positional reference of <CODE>NULL</CODE> as in=20
  <CODE>sales[NULL]</CODE>.</P>
  <LI>
  <P>Symbolic reference using <CODE>IS</CODE> <CODE>NULL</CODE> =
predicate as in=20
  <CODE>sales[product IS NULL]</CODE>.</P></LI></UL>
<P>Note that symbolic reference <CODE>sales[product =3D NULL]</CODE> =
would not=20
test for nulls in the product dimension. This behavior conforms with the =

standard handling of nulls by SQL.</P></DIV><!-- class=3D"sect3" =
--></DIV><!-- class=3D"sect2" --><A id=3DBEIDFCBH=20
name=3DBEIDFCBH></A>
<DIV class=3Dsect2><!-- infolevel=3D"all" infotype=3D"General" --><A =
id=3Dsthref1912=20
name=3Dsthref1912></A>
<H3 class=3Dsect2>Reference Models</H3>
<P>In addition to the multi-dimensional array on which rules operate, =
which is=20
called the main model, one or more read-only multi-dimensional arrays, =
called=20
reference models, can be created and referenced in the =
<CODE>MODEL</CODE> clause=20
to act as look-up tables for the main model. Like the main model, a =
reference=20
model is defined over a query block and has <CODE>DIMENSION</CODE>=20
<CODE>BY</CODE> and <CODE>MEASURES</CODE> clauses to indicate its =
dimensions and=20
measures respectively. A reference model is created by the following=20
subclause:</P><PRE class=3Doac_no_warn xml:space=3D"preserve">REFERENCE =
model_name ON (query) DIMENSION BY (cols) MEASURES (cols)=20
   [reference options]

</PRE>
<P>Like the main model, a multi-dimensional array for the reference =
model is=20
built before evaluating the rules. But, unlike the main model, reference =
models=20
are read-only in that their cells cannot be updated and no new cells can =
be=20
inserted after they are built. Thus, the rules in the main model can =
access=20
cells of a reference model, but they cannot update or insert new cells =
into the=20
reference model. The following is an example using a currency conversion =
table=20
as a reference model:</P><PRE class=3Doac_no_warn =
xml:space=3D"preserve">CREATE TABLE dollar_conv_tbl(country =
VARCHAR2(30), exchange_rate NUMBER);
INSERT INTO dollar_conv_tbl VALUES('Poland', 0.25);
INSERT INTO dollar_conv_tbl VALUES('France', 0.14);
...

</PRE>
<P>Now, to convert the projected sales of Poland and France for 2003 to =
the US=20
dollar, you can use the dollar conversion table as a reference model as =
in the=20
following:</P><PRE class=3Doac_no_warn xml:space=3D"preserve">SELECT =
country, year, sales, dollar_sales
FROM sales_view=20
GROUP BY country, year
MODEL
  REFERENCE conv_ref ON (SELECT country, exchange_rate FROM =
dollar_conv_tbl)
    DIMENSION BY (country) MEASURES (exchange_rate) IGNORE NAV
  MAIN conversion
    DIMENSION BY (country, year)
    MEASURES (SUM(sales) sales, SUM(sales) dollar_sales) IGNORE NAV
RULES
(dollar_sales['France', 2003] =3D sales[CV(country), 2002] * 1.02 *=20
   conv_ref.exchange_rate['France'],=20
   dollar_sales['Poland', 2003] =3D=20
      sales['Poland', 2002] * 1.05 * exchange_rate['Poland']);

</PRE>
<P>Observe in this example that:</P>
<UL>
  <LI>
  <P>A one dimensional reference model named <CODE>conv_ref</CODE> is =
created on=20
  rows from the table <CODE>dollar_conv_tbl</CODE> and that its measure=20
  <CODE>exchange_rate</CODE> has been referenced in the rules of the =
main=20
  model.</P>
  <LI>
  <P>The main model (called <CODE>conversion</CODE>) has two dimensions, =
country=20
  and year, whereas the reference model <CODE>conv_ref</CODE> has one =
dimension,=20
  country.</P>
  <LI>
  <P>Different styles of accessing the <CODE>exchange_rate</CODE> =
measure of the=20
  reference model. For France, it is rather explicit with=20
  <CODE>model_name.measure_name</CODE> notation=20
  <CODE>conv_ref.exchange_rate</CODE>, whereas for Poland, it is a =
simple=20
  <CODE>measure_name</CODE> reference <CODE>exchange_rate</CODE>. The =
former=20
  notation needs to be used to resolve any ambiguities in column names =
across=20
  main and reference models.</P></LI></UL>
<P>Growth rates, in this example, are hard coded in the rules. The =
growth rate=20
for France is 2% and that of Poland is 5%. But they could come from a =
separate=20
table and you can have a reference model defined on top of that. Assume =
that you=20
have a <CODE>growth_rate(country, year, rate)</CODE> table defined as =
the=20
following:</P><PRE class=3Doac_no_warn xml:space=3D"preserve">CREATE =
TABLE growth_rate_tbl(country VARCHAR2(30),=20
   year NUMBER, growth_rate NUMBER);
INSERT INTO growth_rate_tbl VALUES('Poland', 2002, 2.5);
INSERT INTO growth_rate_tbl VALUES('Poland', 2003, 5);
...
INSERT INTO growth_rate_tbl VALUES('France', 2002, 3);
INSERT INTO growth_rate_tbl VALUES('France', 2003, 2.5);

</PRE>
<P>Then the following query computes the projected sales in dollars for =
2003 for=20
all countries:</P><PRE class=3Doac_no_warn xml:space=3D"preserve">SELECT =
country, year, sales, dollar_sales
FROM sales_view=20
GROUP BY country, year=20
MODEL
  REFERENCE conv_ref ON
          (SELECT country, exchange_rate FROM dollar_conv_tbl)
           DIMENSION BY (country c) MEASURES (exchange_rate) IGNORE NAV
  REFERENCE growth_ref ON=20
          (SELECT country, year, growth_rate FROM growth_rate_tbl)
           DIMENSION BY (country c, year y) MEASURES (growth_rate) =
IGNORE NAV
  MAIN projection
   DIMENSION BY (country, year) MEASURES (SUM(sales) sales, 0 =
dollar_sales)
  IGNORE NAV=20
  RULES =20
  (dollar_sales[ANY, 2003] =3D sales[CV(country), 2002] *=20
   growth_rate[CV(country), CV(year)] *=20
   exchange_rate[CV(country)]);

</PRE>
<P>This query shows the capability of the <CODE>MODEL</CODE> clause in =
dealing=20
with and relating objects of different dimensionality. Reference model=20
<CODE>conv_ref</CODE> has one dimension while the reference model=20
<CODE>growth_ref</CODE> and the main model have two dimensions. =
Dimensions in=20
the single cell references on reference models are specified using the=20
<CODE>CV</CODE> function thus relating the cells in main model with the=20
reference model. This specification, in effect, is performing a =
relational join=20
between main and reference models.</P>
<P>Reference models also help you convert keys to sequence numbers, =
perform=20
computations using sequence numbers (for example, where a prior period =
would be=20
used in a subtraction operation), and then convert sequence numbers back =
to=20
keys. For example, consider a view that assigns sequence numbers to =
years:</P><PRE class=3Doac_no_warn xml:space=3D"preserve">CREATE or =
REPLACE VIEW year_2_seq (i, year) AS=20
SELECT ROW_NUMBER() OVER (ORDER BY calendar_year), calendar_year=20
FROM (SELECT DISTINCT calendar_year FROM TIMES);=20

</PRE>
<P>This view can define two lookup tables: integer-to-year =
<CODE>i2y</CODE>,=20
which maps sequence numbers to integers, and year-to-integer =
<CODE>y2i</CODE>,=20
which performs the reverse mapping. The references =
<CODE>y2i.i[year]</CODE> and=20
<CODE>y2i.i[year] - 1</CODE> return sequence numbers of the current and =
previous=20
years respectively and the reference <CODE>i2y.y[y2i.i[year]-1]</CODE> =
returns=20
the year key value of the previous year. The following query =
demonstrates such a=20
usage of reference models:</P><PRE class=3Doac_no_warn =
xml:space=3D"preserve">SELECT country, product, year, sales, =
prior_period
FROM sales_view
MODEL
  REFERENCE y2i ON (SELECT year, i FROM year_2_seq) DIMENSION BY (year =
y)=20
   MEASURES (i)
  REFERENCE i2y ON (SELECT year, i FROM year_2_seq) DIMENSION BY (i)=20
   MEASURES (year y)
  MAIN projection2 PARTITION BY (country)
  DIMENSION BY (product, year)=20
  MEASURES (sales, CAST(NULL AS NUMBER) prior_period)
(prior_period[ANY, ANY] =3D sales[CV(product), =
i2y.y[y2i.i[CV(year)]-1]])
ORDER BY country, product, year;

</PRE>
<P>Nesting of reference model cell references is evident in the =
preceding=20
example. Cell reference on the reference model <CODE>y2i</CODE> is =
nested inside=20
the cell reference on <CODE>i2y</CODE> which, in turn, is nested in the =
cell=20
reference on the main SQL model. There is no limitation on the levels of =
nesting=20
you can have on reference model cell references. However, you can only =
have two=20
levels of nesting on the main SQL model cell references.</P>
<P>Finally, the following are restrictions on the specification and =
usage of=20
reference models:</P>
<UL>
  <LI>
  <P>Reference models cannot have a <CODE>PARTITION</CODE> =
<CODE>BY</CODE>=20
  clause.</P>
  <LI>
  <P>The query block on which the reference model is defined cannot be=20
  correlated to an outer query.</P>
  <LI>
  <P>Reference models must be named and their names should be =
unique.</P>
  <LI>
  <P>All references to the cells of a reference model should be single =
cell=20
  references.</P></LI></UL></DIV><!-- class=3D"sect2" --></DIV><!-- =
class=3D"sect1" --><A=20
id=3Di1011729 name=3Di1011729></A>
<DIV class=3Dsect1><A id=3Dsthref1913 name=3Dsthref1913></A>
<H2 class=3Dsect1>Advanced Topics in SQL Modeling</H2>
<P>This section discusses more advanced topics in SQL modeling, and=20
includes:</P>
<UL>
  <LI>
  <P><A=20
  =
href=3D"http://download.oracle.com/docs/cd/B19306_01/server.102/b14223/sq=
lmodel.htm#CHDHDHGG">FOR=20
  Loops</A></P>
  <LI>
  <P><A=20
  =
href=3D"http://download.oracle.com/docs/cd/B19306_01/server.102/b14223/sq=
lmodel.htm#i1012496">Iterative=20
  Models</A></P>
  <LI>
  <P><A=20
  =
href=3D"http://download.oracle.com/docs/cd/B19306_01/server.102/b14223/sq=
lmodel.htm#BEIBEHCE">Rule=20
  Dependency in AUTOMATIC ORDER Models</A></P>
  <LI>
  <P><A=20
  =
href=3D"http://download.oracle.com/docs/cd/B19306_01/server.102/b14223/sq=
lmodel.htm#i1012511">Ordered=20
  Rules</A></P>
  <LI>
  <P><A=20
  =
href=3D"http://download.oracle.com/docs/cd/B19306_01/server.102/b14223/sq=
lmodel.htm#BEIJGAAE">Analytic=20
  Functions</A></P>
  <LI>
  <P><A=20
  =
href=3D"http://download.oracle.com/docs/cd/B19306_01/server.102/b14223/sq=
lmodel.htm#CHDIAGFB">Unique=20
  Dimensions Versus Unique Single References</A></P></LI></UL><A =
id=3DCHDHDHGG=20
name=3DCHDHDHGG></A>
<DIV class=3Dsect2><!-- infolevel=3D"all" infotype=3D"General" --><A =
id=3Dsthref1914=20
name=3Dsthref1914></A>
<H3 class=3Dsect2><A id=3DDWHSG0223 name=3DDWHSG0223></A>FOR Loops</H3>
<P>Th<A id=3Dsthref1915 name=3Dsthref1915></A>e <CODE>MODEL</CODE> =
clause provides a=20
<CODE>FOR</CODE> construct that can be used inside rules to express =
computations=20
more compactly. It can be used on both the left and right side of a =
rule.=20
<CODE>FOR</CODE> loops are treated as positional references when on the =
left=20
side of a rule. For example, consider the following computation, which =
estimates=20
the sales of several products for 2004 to be 10% higher than their sales =
for=20
2003:</P><PRE class=3Doac_no_warn xml:space=3D"preserve">RULES UPSERT
(sales['Bounce', 2004] =3D 1.1 * sales['Bounce', 2003],
 sales['Standard Mouse Pad', 2004] =3D 1.1 * sales['Standard Mouse Pad', =
2003],
...
 sales['Y Box', 2004] =3D 1.1 * sales['Y Box', 2003])

</PRE>
<P>The <CODE>UPSERT</CODE> option is used in this computation so that =
cells for=20
these products and 2004 will be inserted if they are not previously =
present in=20
the multi-dimensional array. This is rather bulky as you have to have as =
many=20
rules as there are products. Using the <CODE>FOR</CODE> construct, this=20
computation can be represented compactly and with exactly the same =
semantics as=20
in:</P><PRE class=3Doac_no_warn xml:space=3D"preserve">RULES UPSERT=20
(sales[FOR product IN ('Bounce', 'Standard Mouse Pad', ..., 'Y Box'), =
2004] =3D=20
   1.1 * sales[CV(product), 2003])

</PRE>
<P>If you write a specification similar to this, but without the=20
<CODE>FOR</CODE> keyword as in the following:</P><PRE =
class=3Doac_no_warn xml:space=3D"preserve">RULES UPSERT=20
(sales[product IN ('Bounce', 'Standard Mouse Pad', ..., 'Y Box'), 2004] =
=3D=20
   1.1 * sales[CV(product), 2003])

</PRE>
<P>You would get <CODE>UPDATE</CODE> semantics even though you have =
specified=20
<CODE>UPSERT</CODE>. In other words, existing cells will be updated but =
no new=20
cells will be created by this specification. This is because the =
multi-cell=20
reference on product is a symbolic reference and symbolic references do =
not=20
permit insertion of new cells. You can view a <CODE>FOR</CODE> construct =
as a=20
macro that generates multiple rules with positional references from a =
single=20
rule, thus preserving the <CODE>UPSERT</CODE> semantics. Conceptually, =
the=20
following rule:</P><PRE class=3Doac_no_warn =
xml:space=3D"preserve">sales[FOR product IN ('Bounce', 'Standard Mouse =
Pad', ..., 'Y Box'),
      FOR year IN (2004, 2005)] =3D 1.1 * sales[CV(product), CV(year)-1]

</PRE>
<P>Can be treated as an ordered collection of the following =
rules:</P><PRE class=3Doac_no_warn =
xml:space=3D"preserve">sales['Bounce', 2004] =3D 1.1 * =
sales[CV(product), CV(year)-1],
sales['Bounce', 2005] =3D 1.1 * sales[CV(product), CV(year)-1],
sales['Standard Mouse Pad', 2004] =3D 1.1 *=20
  sales[CV(product), CV(year)-1],
sales['Standard Mouse Pad', 2005] =3D 1.1 * sales[CV(product),
 CV(year)-1],
...
sales['Y Box', 2004] =3D 1.1 * sales[CV(product), CV(year)-1],
sales['Y Box', 2005] =3D 1.1 * sales[CV(product), CV(year)-1]

</PRE>
<P>The <CODE>FOR</CODE> construct in the preceding examples is of type=20
<CODE>FOR</CODE> <CODE>dimension</CODE> <CODE>IN</CODE> <CODE><SPAN=20
class=3Dcodeinlineitalic>(list of values)</SPAN></CODE>. Values in the =
list should=20
be single-value expressions such as expressions of constants, =
single-cell=20
references, and so on. In the last example, there are separate =
<CODE>FOR</CODE>=20
constructs on product and year. It is also possible to specify all =
dimensions=20
using one <CODE>FOR</CODE> construct and specify the values using =
multi-column=20
<CODE>IN</CODE> lists. Consider for example, if we want only to estimate =
sales=20
for Bounce in 2004, Standard Mouse Pad in 2005 and Y Box in 2004 and =
2005. This=20
can be formulated as the following:</P><PRE class=3Doac_no_warn =
xml:space=3D"preserve">sales[FOR (product, year) IN (('Bounce', 2004), =
('Standard Mouse Pad', 2005),
  ('Y Box', 2004), ('Y Box', 2005))] =3D=20
     1.1 * sales[CV(product), CV(year)-1]

</PRE>
<P>This <CODE>FOR</CODE> construct should be of the form <CODE>FOR (d1, =
..., dn)=20
IN ((d1_val1, ..., dn_val1), ..., (d1_valm, ..., dn_valm)]</CODE> when =
there are=20
n dimensions <CODE>d1, ..., dn</CODE> and <CODE>m</CODE> values in the =
list.</P>
<P>In some cases, the list of values for a dimension in <CODE>FOR</CODE> =
can be=20
retrieved from a table or a subquery. Oracle Database provides a type of =

<CODE>FOR</CODE> construct as in <CODE>FOR</CODE> <CODE>dimension</CODE> =

<CODE>IN</CODE> <CODE><SPAN =
class=3Dcodeinlineitalic>(subquery)</SPAN></CODE> to=20
handle these cases. For example, assume that the products of interest =
are stored=20
in a table <CODE>interesting_products</CODE>, then the following rule =
estimates=20
their sales in 2004 and 2005:</P><PRE class=3Doac_no_warn =
xml:space=3D"preserve">sales[FOR product IN (SELECT product_name FROM =
interesting_products)
    FOR year IN (2004, 2005)] =3D 1.1 * sales[CV(product), CV(year)-1]

</PRE>
<P>As another example, consider the scenario where you want to introduce =
a new=20
country, called <CODE>new_country</CODE>, with sales that mimic those of =
Poland=20
for all products and years where there are sales in Poland. This is =
accomplished=20
by issuing the following statement:</P><PRE class=3Doac_no_warn =
xml:space=3D"preserve">SELECT country, product, year, s
FROM sales_view
MODEL
DIMENSION BY (country, product, year)
MEASURES (sales s) IGNORE NAV
RULES UPSERT
(s[FOR (country, product, year) IN=20
       (SELECT DISTINCT 'new_country', product, year
        FROM sales_view
        WHERE country =3D 'Poland')] =3D s['Poland',CV(),CV()])
ORDER BY country, year, product;

</PRE>
<P>Note the multi-column <CODE>IN</CODE>-list produced by evaluating the =

subquery in this specification. The subquery used to obtain the=20
<CODE>IN</CODE>-list cannot be correlated to outer query blocks.</P>
<P>Note that the upsert list created by the rule is a cross-product of =
the=20
distinct values for each dimension. For example, if there are 10 values =
for=20
country, 5 values for year, and 3 values for product, we will generate =
an upsert=20
list containing 150 cells.</P>
<P>If you know that the values of interest come from a discrete domain, =
you can=20
use <CODE>FOR</CODE> construct <CODE>FOR dimension FROM value1 TO value2 =

[INCREMENT | DECREMENT] value3</CODE>. This specification results in =
values=20
between <CODE>value1</CODE> and <CODE>value2</CODE> by starting from=20
<CODE>value1</CODE> and incrementing (or decrementing) by =
<CODE>value3</CODE>.=20
The values <CODE>value1</CODE>, <CODE>value2</CODE>, and =
<CODE>value3</CODE>=20
should be single-value expressions. For example, the following =
rule:</P><PRE class=3Doac_no_warn xml:space=3D"preserve">sales['Bounce', =
FOR year FROM 2001 TO 2005 INCREMENT 1] =3D=20
  sales['Bounce', year=3DCV(year)-1] * 1.2

</PRE>
<P>This is semantically equivalent to the following rules in =
order:</P><PRE class=3Doac_no_warn =
xml:space=3D"preserve">sales['Bounce', 2001] =3D sales['Bounce', 2000] * =
1.2,
sales['Bounce', 2002] =3D sales['Bounce', 2001] * 1.2,
...
sales['Bounce', 2005] =3D sales['Bounce', 2004] * 1.2

</PRE>
<P>This kind of <CODE>FOR</CODE> construct can be used for dimensions of =

numeric, date and datetime datatypes. The type for increment/decrement=20
expression <CODE>value3</CODE> should be numeric for numeric dimensions =
and can=20
be numeric or interval for dimensions of date or datetime types. Also,=20
<CODE>value3</CODE> should be positive. Oracle will return an error if =
you use=20
<CODE>FOR year FROM 2005 TO 2001 INCREMENT -1</CODE>. You should use =
either=20
<CODE>FOR year FROM 2005 TO 2001 DECREMENT 1</CODE> or <CODE>FOR year =
FROM 2001=20
TO 2005 INCREMENT 1</CODE>.</P>
<P>To generate string values, you can use the <CODE>FOR</CODE> construct =

<CODE>FOR dimension LIKE string FROM value1 TO value2 [INCREMENT | =
DECREMENT]=20
value3</CODE>. The string <CODE>string</CODE> should contain only one=20
<CODE>%</CODE> character. This specification results in string by =
replacing=20
<CODE>%</CODE> with values between <CODE>value1</CODE> and =
<CODE>value2</CODE>=20
with appropriate increment/decrement value <CODE>value3</CODE>. For =
example,=20
consider the following rule:</P><PRE class=3Doac_no_warn =
xml:space=3D"preserve">sales[FOR product LIKE 'product-%' FROM 1 TO 3 =
INCREMENT 1, 2003] =3D=20
sales[CV(product), 2002] * 1.2

</PRE>
<P>This is equivalent to the following:</P><PRE class=3Doac_no_warn =
xml:space=3D"preserve">sales['product-1', 2003] =3D sales['product-1', =
2002] * 1.2,
sales['product-2', 2003] =3D sales['product-2', 2002] * 1.2,
sales['product-3', 2003] =3D sales['product-3', 2002] * 1.2

</PRE>
<P>In <CODE>SEQUENTIAL</CODE> <CODE>ORDER</CODE> models, rules =
represented by a=20
<CODE>FOR</CODE> construct are evaluated in the order they are =
generated. On the=20
contrary, rule evaluation order would be dependency based if=20
<CODE>AUTOMATIC</CODE> <CODE>ORDER</CODE> is specified. For example, the =

evaluation order for the rules represented by the rule:</P><PRE =
class=3Doac_no_warn xml:space=3D"preserve">sales['Bounce', FOR year FROM =
2004 TO 2001 DECREMENT 1] =3D=20
  1.1 * sales['Bounce', CV(year)-1]

</PRE>
<P>For <CODE>SEQUENTIAL</CODE> <CODE>ORDER</CODE> models, the rules =
would be=20
generated in this order:</P><PRE class=3Doac_no_warn =
xml:space=3D"preserve">sales['Bounce', 2004] =3D 1.1 * sales['Bounce', =
2003],
sales['Bounce', 2003] =3D 1.1 * sales['Bounce', 2002],
sales['Bounce', 2002] =3D 1.1 * sales['Bounce', 2001],
sales['Bounce', 2001] =3D 1.1 * sales['Bounce', 2000]

</PRE>
<P>While for <CODE>AUTOMATIC</CODE> <CODE>ORDER</CODE> models, the order =
would=20
be equivalent to:</P><PRE class=3Doac_no_warn =
xml:space=3D"preserve">sales['Bounce', 2001] =3D 1.1 * sales['Bounce', =
2000],
sales['Bounce', 2002] =3D 1.1 * sales['Bounce', 2001],
sales['Bounce', 2003] =3D 1.1 * sales['Bounce', 2002],
sales['Bounce', 2004] =3D 1.1 * sales['Bounce', 2003]
</PRE>
<DIV class=3Dsect3><!-- infolevel=3D"all" infotype=3D"General" --><A =
id=3Dsthref1916=20
name=3Dsthref1916></A>
<H4 class=3Dsect3>Evaluation of Formulas with FOR Loops</H4>
<P>The <CODE>FOR</CODE> loop construct provides an iterative mechanism =
to=20
generate single-value references for a dimension or for all dimensions =
(in the=20
case of multi-column for <CODE>IN</CODE> lists). The evaluation of a =
formula=20
with <CODE>FOR</CODE> loops on its left side basically consists of =
evaluation of=20
the right side of the formula for each single-value reference generated =
by these=20
<CODE>FOR</CODE> loops and assigning the result to the specified cell =
with this=20
single-value reference. The generation of these single reference values =
is=20
called "unfolding the <CODE>FOR</CODE> loop". These unfolded cells are =
evaluated=20
in the order they are generated during the unfolding process.</P>
<P>How unfolding is performed depends on the <CODE>UPSERT</CODE>,=20
<CODE>UPDATE</CODE>, and <CODE>UPDATE</CODE> <CODE>ALL</CODE> behavior =
specified=20
for the rule and the specific characteristics of the rule. To understand =
this,=20
we need to discuss two stages of query processing: query plan creation =
and query=20
execution. Query plan creation is a stage where certain rule references =
are=20
resolved in order to create an efficient query execution plan. Query =
execution=20
is the stage where all remaining unresolved references must be =
determined.=20
<CODE>FOR</CODE> loops may be unfolded at either query plan generation =
or at=20
query execution. Below we discuss the details of the unfolding =
decision.</P>
<DIV class=3Dsect4><!-- infolevel=3D"all" infotype=3D"General" --><A =
id=3Dsthref1917=20
name=3Dsthref1917></A>
<H5 class=3Dsect4>Unfolding For UPDATE and UPSERT Rules</H5>
<P>When using <CODE>UPDATE</CODE> or <CODE>UPSERT</CODE> rules, if =
unfolding the=20
left side of a rule is guaranteed to generate single cell references, =
the=20
unfolding is done at query execution. If the unfolding process cannot =
generate=20
single cell references, unfolding is performed at query plan creation =
and a copy=20
of the same formula for each generated reference by the unfolding =
process is=20
created. For example, the unfolding of the following formula will occur =
at query=20
execution as unfolding generates single cell references:</P><PRE =
class=3Doac_no_warn xml:space=3D"preserve">sales[FOR product IN =
('prod1', 'prod2'), 2003] =3D sales[CV(product), 2002] * 1.2

</PRE>
<P>However, consider the following formula, where unfolding reference =
values=20
will not produce single value references due to the existence of a =
predicate on=20
another dimension:</P><PRE class=3Doac_no_warn =
xml:space=3D"preserve">sales[FOR product in ('prod1', 'prod2'), year =
&gt;=3D 2003] =20
   =3D sales[CV(product), 2002] * 1.2

</PRE>
<P>There is no single-value reference on the year dimension, so even =
when the=20
<CODE>FOR</CODE> loop is unfolded on the product dimension, there will =
be no=20
single-value references on the left side of this formula. This means =
that the=20
unfolding will occur at query plan creation and physically replace the =
original=20
formula with the following formulas:</P><PRE class=3Doac_no_warn =
xml:space=3D"preserve">sales['prod1', year &gt;=3D 2003]  =3D =
sales[CV(product), 2002] * 1.2,
sales['prod2', year &gt;=3D 2003]  =3D sales[CV(product), 2002] * 1.2

</PRE>
<P>The analysis and optimizations performed within the =
<CODE>MODEL</CODE> clause=20
are done after unfolding at query plan creation (if that is what =
occurs), so,=20
from that point on, everything is as if the multiple rules are specified =

explicitly in the <CODE>MODEL</CODE> clause. By performing unfolding at =
query=20
plan creation in these cases, more accurate analysis and better =
optimization of=20
formula evaluation is achieved. One thing to note is that there may be =
an=20
increase in the number of formulas and, if this increase pushes the =
total number=20
of formulas beyond the maximum limit, Oracle will signal an =
error.</P></DIV><!-- class=3D"sect4" -->
<DIV class=3Dsect4><!-- infolevel=3D"all" infotype=3D"General" --><A =
id=3Dsthref1918=20
name=3Dsthref1918></A>
<H5 class=3Dsect4>Unfolding For UPSERT ALL Rules</H5>
<P>Rules with <CODE>UPSERT</CODE> <CODE>ALL</CODE> behavior have a very=20
different approach to unfolding <CODE>FOR</CODE> loops. No matter what=20
predicates are used, an <CODE>UPSERT</CODE> <CODE>ALL</CODE> rule will =
unfold=20
<CODE>FOR</CODE> loops at query execution. This behavior avoids certain =
FOR loop=20
restrictions discussed in the next section. However, there is a =
trade-off of=20
fewer restrictions versus more optimized query plans. An =
<CODE>UPSERT</CODE>=20
<CODE>ALL</CODE> rule will tend toward slower performance than a similar =

<CODE>UPSERT</CODE> or <CODE>UPDATE</CODE> rule, and this should be =
considered=20
when designing models.</P></DIV><!-- class=3D"sect4" -->
<DIV class=3Dsect4><!-- infolevel=3D"all" infotype=3D"General" --><A =
id=3Dsthref1919=20
name=3Dsthref1919></A>
<H5 class=3Dsect4>Restrictions on Using FOR Loop Expressions on the Left =
Side of=20
Formulas</H5>
<P>Restrictions on the use of <CODE>FOR</CODE> loop constructs are =
determined=20
based on whether the unfolding takes place at query plan creation or at =
query=20
execution. If a formula with <CODE>FOR</CODE> loops on its left side is =
unfolded=20
at query plan creation (due to the reasons explained in the previous =
section),=20
the expressions that need to be evaluated for unfolding must be =
expressions of=20
constants whose values are available at query plan creation. For =
example,=20
consider the following statement:</P><PRE class=3Doac_no_warn =
xml:space=3D"preserve">sales[For product like 'prod%' from =
ITERATION_NUMBER=20
to ITERATION_NUMBER+1, year &gt;=3D 2003] =3D  sales[CV(product), =
2002]*1.2

</PRE>
<P>If this rule does not have <CODE>UPSERT</CODE> <CODE>ALL</CODE> =
specified for=20
its behavior, it will be unfolded at query plan creation. Because the =
value of=20
the <CODE>ITERATION_NUMBER</CODE> is not known at query plan creation, =
and the=20
value is needed to evaluate start and end expressions, Oracle will =
signal an=20
error unless that rule is unfolded at query execution. However, the =
following=20
rule would be unfolded at query plan creation without any errors: the =
value of=20
<CODE>ITERATION_NUMBER</CODE> is not needed for unfolding in this case, =
even=20
though it appears as an expression in the <CODE>FOR</CODE> loop:</P><PRE =
class=3Doac_no_warn xml:space=3D"preserve">sales[For product in =
('prod'||ITERATION_NUMBER, 'prod'||(ITERATION_NUMBER+1)),
 year &gt;=3D 2003] =3D  sales[CV(product), 2002]*1.2

</PRE>
<P>Expressions that have any of the following conditions cannot be =
evaluated at=20
query plan creation:</P>
<UL>
  <LI>
  <P>nested cell references</P>
  <LI>
  <P>reference model look-ups</P>
  <LI>
  <P><CODE>ITERATION_NUMBER</CODE> references</P></LI></UL>
<P>Rules with <CODE>FOR</CODE> loops that require the results of such=20
expressions will cause an error if unfolded at query plan creation. =
However,=20
these expressions will not cause any error if unfolding is done at query =

execution.</P>
<P>If a formula has subqueries in its <CODE>FOR</CODE> loop constructs =
and this=20
formula requires compile-time unfolding, these subqueries are evaluated =
at query=20
plan creation so that unfolding can happen. Evaluating a subquery at =
query plan=20
creation can render a cursor non-sharable, which means the same query =
may need=20
to be recompiled every time it is issued. If unfolding of such a formula =
is=20
deferred to query execution, no compile-time evaluation is necessary and =
the=20
formula has no impact on the sharability of the cursor.</P>
<P>Subqueries in the <CODE>FOR</CODE> loops of a formula can reference =
tables in=20
the <CODE>WITH</CODE> clause if the formula is to be unfolded at query=20
execution. If the formula has to be unfolded at query plan creation, =
Oracle will=20
signal an=20
error.</P></DIV><!-- class=3D"sect4" --></DIV><!-- class=3D"sect3" =
--></DIV><!-- class=3D"sect2" --><A=20
id=3Di1012496 name=3Di1012496></A>
<DIV class=3Dsect2><A id=3Dsthref1920 name=3Dsthref1920></A>
<H3 class=3Dsect2>Iterative Models</H3>
<P>Using the <CODE>ITERATE</CODE> option of the <CODE>MODEL</CODE> =
clause, you=20
can evaluate rules iteratively for a certain number of times, which you =
can=20
specify as an argument to the <CODE>ITERATE</CODE> clause. =
<CODE>ITERATE</CODE>=20
can be specified only for <CODE>SEQUENTIAL</CODE> <CODE>ORDER</CODE> =
models and=20
such models are referred to as iterative models. For example, consider =
the=20
following:</P><PRE class=3Doac_no_warn xml:space=3D"preserve">SELECT x, =
s FROM DUAL
MODEL=20
  DIMENSION BY (1 AS x) MEASURES (1024 AS s)
  RULES UPDATE ITERATE (4)
(s[1] =3D s[1]/2);

</PRE>
<P>In Oracle, the table <CODE>DUAL</CODE> has only one row. Hence this =
model=20
defines a 1-dimensional array, dimensioned by x with a measure =
<CODE>s</CODE>,=20
with a single element <CODE>s[1] =3D 1024</CODE>. The rule <CODE>s[1] =
=3D=20
s[1]/2</CODE> evaluation will be repeated four times. The result of this =
query=20
will be a single row with values 1 and 64 for columns <CODE>x</CODE> and =

<CODE>s</CODE> respectively. The number of iterations arguments for the=20
<CODE>ITERATE</CODE> clause should be a positive integer constant. =
Optionally,=20
you can specify an early termination condition to stop rule evaluation =
before=20
reaching the maximum iteration. This condition is specified in the=20
<CODE>UNTIL</CODE> subclause of <CODE>ITERATE</CODE> and is checked at =
the end=20
of an iteration. So, you will have at least one iteration when=20
<CODE>ITERATE</CODE> is specified. The syntax of the =
<CODE>ITERATE</CODE> clause=20
is:</P><PRE class=3Doac_no_warn xml:space=3D"preserve">ITERATE =
(number_of_iterations) [ UNTIL (condition) ]

</PRE>
<P>Iterative evaluation will stop either after finishing the specified =
number of=20
iterations or when the termination condition evaluates to =
<CODE>TRUE</CODE>,=20
whichever comes first.</P>
<P>In some cases, you may want the termination condition to be based on =
the=20
change, across iterations, in value of a cell. Oracle provides a =
mechanism to=20
specify such conditions in that it enables you to access cell values as =
they=20
existed before and after the current iteration in the <CODE>UNTIL</CODE> =

condition. Oracle's <CODE>PREVIOUS</CODE> function takes a single cell =
reference=20
as an argument and returns the measure value of the cell as it existed =
after the=20
previous iteration. You can also access the current iteration number by =
using=20
the system variable <CODE>ITERATION_NUMBER</CODE>, which starts at value =
0 and=20
is incremented after each iteration. By using <CODE>PREVIOUS</CODE> and=20
<CODE>ITERATION_NUMBER</CODE>, you can construct complex termination=20
conditions.</P>
<P>Consider the following iterative model that specifies iteration over =
rules=20
till the change in the value of <CODE>s[1]</CODE> across successive =
iterations=20
falls below 1, up to a maximum of 1000 times:</P><PRE =
class=3Doac_no_warn xml:space=3D"preserve">SELECT x, s, iterations FROM =
DUAL
MODEL=20
  DIMENSION BY (1 AS x) MEASURES (1024 AS s, 0 AS iterations)
  RULES ITERATE (1000) UNTIL ABS(PREVIOUS(s[1]) - s[1]) &lt; 1
 (s[1] =3D s[1]/2, iterations[1] =3D ITERATION_NUMBER);

</PRE>
<P>The absolute value function (<CODE>ABS</CODE>) can be helpful for =
termination=20
conditions because you may not know if the most recent value is positive =
or=20
negative. Rules in this model will be iterated over 11 times as after =
11th=20
iteration the value of <CODE>s[1]</CODE> would be 0.5. This query =
results in a=20
single row with values 1, 0.5, 10 for <CODE>x</CODE>, <CODE>s</CODE> and =

iterations respectively.</P>
<P>You can use the <CODE>PREVIOUS</CODE> function only in the =
<CODE>UNTIL</CODE>=20
condition. However, <CODE>ITERATION_NUMBER</CODE> can be anywhere in the =
main=20
model. In the following example, <CODE>ITERATION_NUMBER</CODE> is used =
in cell=20
references:</P><PRE class=3Doac_no_warn xml:space=3D"preserve">SELECT =
country, product, year, sales
FROM sales_view
MODEL
  PARTITION BY (country) DIMENSION BY (product, year) MEASURES (sales =
sales)
  IGNORE NAV
  RULES ITERATE(3)
(sales['Bounce', 2002 + ITERATION_NUMBER] =3D sales['Bounce', 1999=20
  + ITERATION_NUMBER]);

</PRE>
<P>This statement achieves an array copy of sales of Bounce from cells =
in the=20
array 1999-2001 to 2002-2005.</P></DIV><!-- class=3D"sect2" --><A =
id=3DBEIBEHCE=20
name=3DBEIBEHCE></A>
<DIV class=3Dsect2><!-- infolevel=3D"all" infotype=3D"General" --><A =
id=3Dsthref1921=20
name=3Dsthref1921></A>
<H3 class=3Dsect2>Rule Dependency in AUTOMATIC ORDER Models</H3>
<P>Oracle Database determines the order of evaluation of rules in an=20
<CODE>AUTOMATIC</CODE> <CODE>ORDER</CODE> model based on their =
dependencies. A=20
rule will be evaluated only after the rules it depends on are evaluated. =
The=20
algorithm chosen to evaluate the rules is based on the dependency =
analysis and=20
whether rules in your model have circular (or cyclical) dependencies. A =
cyclic=20
dependency can be of the form "rule A depends on B and rule B depends on =
A" or=20
of the self-cyclic "rule depending on itself" form. An example of the =
former=20
is:</P><PRE class=3Doac_no_warn xml:space=3D"preserve">sales['Bounce', =
2002] =3D 1.5 * sales['Y Box', 2002],
sales['Y Box', 2002] =3D 100000 / sales['Bounce', 2002

</PRE>
<P>An example of the latter is:</P><PRE class=3Doac_no_warn =
xml:space=3D"preserve">sales['Bounce', 2002] =3D 25000 / sales['Bounce', =
2002]

</PRE>
<P>However, there is no self-cycle in the following rule as different =
measures=20
are being accessed on the left and right side:</P><PRE =
class=3Doac_no_warn xml:space=3D"preserve">projected_sales['Bounce', =
2002] =3D 25000 / sales['Bounce', 2002]

</PRE>
<P>When the analysis of an <CODE>AUTOMATIC</CODE> <CODE>ORDER</CODE> =
model finds=20
that the rules have no circular dependencies, Oracle Database will =
evaluate the=20
rules in their dependency order. For example, in the following=20
<CODE>AUTOMATIC</CODE> <CODE>ORDER</CODE> model:</P><PRE =
class=3Doac_no_warn xml:space=3D"preserve">MODEL DIMENSION BY (prod, =
year) MEASURES (sale sales) IGNORE NAV
  RULES AUTOMATIC ORDER
 (sales['SUV', 2001] =3D 10000,
  sales['Standard Mouse Pad', 2001] =3D sales['Finding Fido', 2001]=20
    * 0.10 + sales['Boat', 2001] * 0.50,
  sales['Boat', 2001] =3D sales['Finding Fido', 2001]=20
    * 0.25 + sales['SUV', 2001]* 0.75,
  sales['Finding Fido', 2001] =3D 20000)

</PRE>
<P>Rule 2 depends on rules 3 and 4, while rule 3 depends on rules 1 and =
4, and=20
rules 1 and 4 do not depend on any rule. Oracle, in this case, will find =
that=20
the rule dependencies are acyclic and will evaluate rules in one of the =
possible=20
evaluation orders (1, 4, 3, 2) or (4, 1, 3, 2). This type of rule =
evaluation is=20
called an <CODE>ACYCLIC</CODE> algorithm.</P>
<P>In some cases, Oracle Database may not be able to ascertain that your =
model=20
is acyclic even though there is no cyclical dependency among the rules. =
This can=20
happen if you have complex expressions in your cell references. Oracle =
Database=20
assumes that the rules are cyclic and employs a <CODE>CYCLIC</CODE> =
algorithm=20
that evaluates the model iteratively based on the rules and data. =
Iteration will=20
stop as soon as convergence is reached and the results will be returned. =

Convergence is defined as the state in which further executions of the =
model=20
will not change values of any of the cell in the model. Convergence is =
certain=20
to be reached when there are no cyclical dependencies.</P>
<P>If your <CODE>AUTOMATIC</CODE> <CODE>ORDER</CODE> model has rules =
with=20
cyclical dependencies, Oracle will employ the earlier mentioned=20
<CODE>CYCLIC</CODE> algorithm. Results are produced if convergence can =
be=20
reached within the number of iterations Oracle is going to try the =
algorithm.=20
Otherwise, Oracle will report a cycle detection error. You can =
circumvent this=20
problem by manually ordering the rules and specifying =
<CODE>SEQUENTIAL</CODE>=20
<CODE>ORDER</CODE>.</P></DIV><!-- class=3D"sect2" --><A id=3Di1012511=20
name=3Di1012511></A>
<DIV class=3Dsect2><A id=3Dsthref1922 name=3Dsthref1922></A>
<H3 class=3Dsect2>Ordered Rules</H3>
<P>An ordered rule is one that has <CODE>ORDER</CODE> <CODE>BY</CODE> =
specified=20
on the left side. It accesses cells in the order prescribed by=20
<CODE>ORDER</CODE> <CODE>BY</CODE> and applies the right side =
computation. When=20
you have <CODE>ANY</CODE> or symbolic references on the left side of a =
rule but=20
without the <CODE>ORDER</CODE> <CODE>BY</CODE> clause, Oracle might =
return an=20
error saying that the rule's results depend on the order in which cells =
are=20
accessed and hence are non-deterministic. Consider the following=20
<CODE>SEQUENTIAL</CODE> <CODE>ORDER</CODE> model:</P><PRE =
class=3Doac_no_warn xml:space=3D"preserve">SELECT t, s
FROM sales, times
WHERE sales.time_id =3D times.time_id
GROUP BY calendar_year
MODEL=20
  DIMENSION BY (calendar_year t) MEASURES (SUM(amount_sold) s)
  RULES SEQUENTIAL ORDER
  (s[ANY] =3D s[CV(t)-1]);

</PRE>
<P>This query attempts to set, for all years <CODE>t</CODE>, sales=20
<CODE>s</CODE> value for a year to the sales value of the prior year.=20
Unfortunately, the result of this rule depends on the order in which the =
cells=20
are accessed. If cells are accessed in the ascending order of year, the =
result=20
would be that of column 3 in <A=20
href=3D"http://download.oracle.com/docs/cd/B19306_01/server.102/b14223/sq=
lmodel.htm#CHDGBCFI">Table=20
22-1</A>. If they are accessed in descending order, the result would be =
that of=20
column 4.</P>
<DIV class=3Dtblformal>
<P class=3Dtitleintable><A id=3Dsthref1923 name=3Dsthref1923></A><A =
id=3DCHDGBCFI=20
name=3DCHDGBCFI></A>Table 22-1 Ordered Rules</P>
<TABLE class=3DFormal dir=3Dltr title=3D"Ordered Rules" cellSpacing=3D0 =
cellPadding=3D3=20
rules=3Dgroups width=3D"100%" summary=3D"Ordered Formulas" border=3D1 =
frame=3Dhsides>
  <THEAD>
  <TR vAlign=3Dtop align=3Dleft>
    <TH id=3Dr1c1-t2 vAlign=3Dbottom align=3Dleft>t</TH>
    <TH id=3Dr1c2-t2 vAlign=3Dbottom align=3Dleft>s</TH>
    <TH id=3Dr1c3-t2 vAlign=3Dbottom align=3Dleft>If ascending</TH>
    <TH id=3Dr1c4-t2 vAlign=3Dbottom align=3Dleft>If =
descending</TH></TR></THEAD>
  <TBODY>
  <TR vAlign=3Dtop align=3Dleft>
    <TD id=3Dr2c1-t2 align=3Dleft headers=3Dr1c1-t2>
      <P>1998</P></TD>
    <TD align=3Dleft headers=3D"r2c1-t2 r1c2-t2">
      <P>1210000982</P></TD>
    <TD align=3Dleft headers=3D"r2c1-t2 r1c3-t2">
      <P>null</P></TD>
    <TD align=3Dleft headers=3D"r2c1-t2 r1c4-t2">
      <P>null</P></TD></TR>
  <TR vAlign=3Dtop align=3Dleft>
    <TD id=3Dr3c1-t2 align=3Dleft headers=3Dr1c1-t2>
      <P>1999</P></TD>
    <TD align=3Dleft headers=3D"r3c1-t2 r1c2-t2">
      <P>1473757581</P></TD>
    <TD align=3Dleft headers=3D"r3c1-t2 r1c3-t2">
      <P>null</P></TD>
    <TD align=3Dleft headers=3D"r3c1-t2 r1c4-t2">
      <P>1210000982</P></TD></TR>
  <TR vAlign=3Dtop align=3Dleft>
    <TD id=3Dr4c1-t2 align=3Dleft headers=3Dr1c1-t2>
      <P>2000</P></TD>
    <TD align=3Dleft headers=3D"r4c1-t2 r1c2-t2">
      <P>2376222384</P></TD>
    <TD align=3Dleft headers=3D"r4c1-t2 r1c3-t2">
      <P>null</P></TD>
    <TD align=3Dleft headers=3D"r4c1-t2 r1c4-t2">
      <P>1473757581</P></TD></TR>
  <TR vAlign=3Dtop align=3Dleft>
    <TD id=3Dr5c1-t2 align=3Dleft headers=3Dr1c1-t2>
      <P>2001</P></TD>
    <TD align=3Dleft headers=3D"r5c1-t2 r1c2-t2">
      <P>1267107764</P></TD>
    <TD align=3Dleft headers=3D"r5c1-t2 r1c3-t2">
      <P>null</P></TD>
    <TD align=3Dleft headers=3D"r5c1-t2 r1c4-t2">
      <P>2376222384</P></TD></TR></TBODY></TABLE><BR></DIV><!-- =
class=3D"tblformal" -->
<P>If you want the cells to be considered in descending order and get =
the result=20
given in column 4, you should specify:</P><PRE class=3Doac_no_warn =
xml:space=3D"preserve">SELECT t, s
FROM sales, times
WHERE sales.time_id =3D times.time_id
GROUP BY calendar_year
MODEL=20
  DIMENSION BY (calendar_year t) MEASURES (SUM(amount_sold) s)
  RULES SEQUENTIAL ORDER
  (s[ANY] ORDER BY t DESC =3D s[CV(t)-1]);

</PRE>
<P>In general, you can use any <CODE>ORDER</CODE> <CODE>BY</CODE> =
specification=20
as long as it produces a unique order among cells that match the left =
side cell=20
reference. Expressions in the <CODE>ORDER</CODE> <CODE>BY</CODE> of a =
rule can=20
involve constants, measures and dimension keys and you can specify the =
ordering=20
options <CODE>[ASC | DESC] [NULLS FIRST | NULLS LAST]</CODE> to get the =
order=20
you want.</P>
<P>You can also specify <CODE>ORDER</CODE> <CODE>BY</CODE> for rules in =
an=20
<CODE>AUTOMATIC</CODE> <CODE>ORDER</CODE> model to make Oracle consider =
cells in=20
a particular order during rule evaluation. Rules are never considered=20
self-cyclic if they have <CODE>ORDER</CODE> <CODE>BY</CODE>. For =
example, to=20
make the following <CODE>AUTOMATIC</CODE> <CODE>ORDER</CODE> model with =
a=20
self-cyclic formula acyclic:</P><PRE class=3Doac_no_warn =
xml:space=3D"preserve">MODEL
  DIMENSION BY (calendar_year t) MEASURES (SUM(amount_sold) s)
  RULES AUTOMATIC ORDER
  (s[ANY] =3D s[CV(t)-1])

</PRE>
<P>You need to provide the order in which cells need to be accessed for=20
evaluation using <CODE>ORDER</CODE> <CODE>BY</CODE>. For example, you =
can=20
say:</P><PRE class=3Doac_no_warn xml:space=3D"preserve">s[ANY] ORDER BY =
t =3D s[CV(t) - 1]

</PRE>
<P>Then Oracle will pick an <CODE>ACYCLIC</CODE> algorithm (which is =
certain to=20
produce the result) for formula evaluation.</P></DIV><!-- =
class=3D"sect2" --><A=20
id=3DBEIJGAAE name=3DBEIJGAAE></A>
<DIV class=3Dsect2><!-- infolevel=3D"all" infotype=3D"General" --><A =
id=3Dsthref1924=20
name=3Dsthref1924></A>
<H3 class=3Dsect2><A id=3DDWHSG0224 name=3DDWHSG0224></A>Analytic =
Functions</H3>
<P><A id=3Dsthref1925 name=3Dsthref1925></A><A id=3Dsthref1926 =
name=3Dsthref1926></A><A=20
id=3Dsthref1927 name=3Dsthref1927></A><A id=3Dsthref1928 =
name=3Dsthref1928></A>Analytic=20
functions (also known as window functions) can be used in the right side =
of=20
rules. The ability to use analytic functions adds expressive power and=20
flexibility to the <CODE>MODEL</CODE> clause.The following example =
combines an=20
analytic function with the <CODE>MODEL</CODE> clause. First, we create a =
view=20
<CODE>sales_rollup_time</CODE> that uses the <CODE>GROUPING_ID</CODE> =
function=20
to calculate an identifier for different levels of aggregations. We then =
use the=20
view in a query that calculates the cumulative sum of sales at both the =
quarter=20
and year levels.</P><PRE class=3Doac_no_warn =
xml:space=3D"preserve">CREATE OR REPLACE VIEW sales_rollup_time
AS
SELECT country_name country, calendar_year year, calendar_quarter_desc =
quarter,
GROUPING_ID(calendar_year, calendar_quarter_desc) gid, SUM(amount_sold) =
sale,
COUNT(amount_sold) cnt
FROM sales, times, customers, countries
WHERE sales.time_id =3D times.time_id AND sales.cust_id =3D =
customers.cust_id
  AND customers.country_id =3D countries.country_id
GROUP BY country_name, calendar_year, ROLLUP(calendar_quarter_desc)
ORDER BY gid, country, year, quarter;

SELECT country, year, quarter, sale, csum
FROM sales_rollup_time
WHERE country IN ('United States of America', 'United Kingdom')
MODEL DIMENSION BY (country, year, quarter)
MEASURES (sale, gid, 0 csum)
(
csum[any, any, any] =3D
  SUM(sale) OVER (PARTITION BY country, DECODE(gid,0,year,null)
ORDER BY year, quarter
ROWS UNBOUNDED PRECEDING)
)
ORDER BY country, gid, year, quarter;

COUNTRY                              YEAR QUARTER       SALE       CSUM
------------------------------ ---------- ------- ---------- ----------
United Kingdom                       1998 1998-01  484733.96  484733.96
United Kingdom                       1998 1998-02  386899.15  871633.11
United Kingdom                       1998 1998-03  402296.49  1273929.6
United Kingdom                       1998 1998-04  384747.94 1658677.54
United Kingdom                       1999 1999-01  394911.91  394911.91
United Kingdom                       1999 1999-02  331068.38  725980.29
United Kingdom                       1999 1999-03  383982.61  1109962.9
United Kingdom                       1999 1999-04  398147.59 1508110.49
United Kingdom                       2000 2000-01  424771.96  424771.96
United Kingdom                       2000 2000-02  351400.62  776172.58
United Kingdom                       2000 2000-03  385137.68 1161310.26
United Kingdom                       2000 2000-04   390912.8 1552223.06
United Kingdom                       2001 2001-01  343468.77  343468.77
United Kingdom                       2001 2001-02  415168.32  758637.09
United Kingdom                       2001 2001-03  478237.29 1236874.38
United Kingdom                       2001 2001-04  437877.47 1674751.85
United Kingdom                       1998         1658677.54 1658677.54
United Kingdom                       1999         1508110.49 3166788.03
United Kingdom                       2000         1552223.06 4719011.09
United Kingdom                       2001         1674751.85 6393762.94
...  /*and similar output for the US*/

</PRE>
<P>There are some specific restrictions when using analytic functions. =
See <A=20
href=3D"http://download.oracle.com/docs/cd/B19306_01/server.102/b14223/sq=
lmodel.htm#i1011720">"Rules=20
and Restrictions when Using SQL for Modeling"</A> for more=20
information.</P></DIV><!-- class=3D"sect2" --><A id=3DCHDIAGFB =
name=3DCHDIAGFB></A>
<DIV class=3Dsect2><!-- infolevel=3D"all" infotype=3D"General" --><A =
id=3Dsthref1929=20
name=3Dsthref1929></A>
<H3 class=3Dsect2>Unique Dimensions Versus Unique Single References</H3>
<P>The <CODE>MODEL</CODE> clause, in its default behavior, requires the=20
<CODE>PARTITION</CODE> <CODE>BY</CODE> and <CODE>DIMENSION</CODE>=20
<CODE>BY</CODE> keys to uniquely identify each row in the input to the =
model.=20
Oracle verifies that and returns an error if the data is not unique. =
Uniqueness=20
of the input rowset on the <CODE>PARTITION</CODE> <CODE>BY</CODE> and=20
<CODE>DIMENSION</CODE> <CODE>BY</CODE> keys guarantees that any single =
cell=20
reference accesses one and only one cell in the model. You can specify =
an=20
optional <CODE>UNIQUE</CODE> <CODE>DIMENSION</CODE> keyword in the=20
<CODE>MODEL</CODE> clause to make this behavior explicit. For example, =
the=20
following query:</P><PRE class=3Doac_no_warn =
xml:space=3D"preserve">SELECT country, product, sales
FROM sales_view
WHERE country IN ('France', 'Poland')
MODEL UNIQUE DIMENSION
  PARTITION BY (country) DIMENSION BY (product) MEASURES (sales sales)
  IGNORE NAV RULES UPSERT
(sales['Bounce'] =3D sales['All Products'] * 0.24);=20

</PRE>
<P>This would return a uniqueness violation error as the rowset input to =
model=20
is not unique on <CODE>country</CODE> and <CODE>product</CODE> because=20
<CODE>year</CODE> is also needed:</P><PRE class=3Doac_no_warn =
xml:space=3D"preserve">ERROR at line 2:ORA-32638: Non unique addressing =
in MODEL dimensions

</PRE>
<P>However, the following query does not return such an error:</P><PRE =
class=3Doac_no_warn xml:space=3D"preserve">SELECT country, product, =
year, sales
FROM sales_view
WHERE country IN ('Italy', 'Japan')
MODEL UNIQUE DIMENSION
  PARTITION BY (country) DIMENSION BY (product, year) MEASURES (sales =
sales)
  RULES UPSERT
(sales['Bounce', 2003] =3D sales['All Products', 2002] * 0.24);

</PRE>
<P>Input to the <CODE>MODEL</CODE> clause in this case is unique on=20
<CODE>country</CODE>, <CODE>product</CODE>, and <CODE>year</CODE> as =
shown=20
in:</P><PRE class=3Doac_no_warn xml:space=3D"preserve">COUNTRY   PRODUCT =
                        YEAR   SALES
-------   -----------------------------   ----   --------
Italy     1.44MB External 3.5" Diskette   1998    3141.84
Italy     1.44MB External 3.5" Diskette   1999    3086.87
Italy     1.44MB External 3.5" Diskette   2000    3440.37
Italy     1.44MB External 3.5" Diskette   2001     855.23
...

</PRE>
<P>If you want to relax this uniqueness checking, you can specify=20
<CODE>UNIQUE</CODE> <CODE>SINGLE</CODE> <CODE>REFERENCE</CODE> keyword. =
This can=20
save processing time. In this case, the <CODE>MODEL</CODE> clause checks =
the=20
uniqueness of only the single cell references appearing on the right =
side of=20
rules. So the query that returned the uniqueness violation error would =
be=20
successful if you specify <CODE>UNIQUE</CODE> <CODE>SINGLE</CODE>=20
<CODE>REFERENCE</CODE> instead of <CODE>UNIQUE</CODE>=20
<CODE>DIMENSION</CODE>.</P>
<P>Another difference between <CODE>UNIQUE</CODE> <CODE>DIMENSION</CODE> =
and=20
<CODE>UNIQUE</CODE> <CODE>SINGLE</CODE> <CODE>REFERENCE</CODE> semantics =
is the=20
number of cells that can be updated by a rule with a single cell =
reference on=20
left side. In the case of <CODE>UNIQUE</CODE> <CODE>DIMENSION</CODE>, =
such a=20
rule can update at most one row as only one cell would match the single =
cell=20
reference on the left side. This is because the input rowset would be =
unique on=20
<CODE>PARTITION</CODE> <CODE>BY</CODE> and <CODE>DIMENSION</CODE>=20
<CODE>BY</CODE> keys. With <CODE>UNIQUE</CODE> <CODE>SINGLE</CODE>=20
<CODE>REFERENCE</CODE>, all cells that match the left side single cell =
reference=20
would be updated by the rule.</P></DIV><!-- class=3D"sect2" --><A =
id=3Di1011720=20
name=3Di1011720></A>
<DIV class=3Dsect2><A id=3Dsthref1930 name=3Dsthref1930></A>
<H3 class=3Dsect2><A id=3DDWHSG0225 name=3DDWHSG0225></A>Rules and =
Restrictions when=20
Using SQL for Modeling</H3>
<P>The f<A id=3Dsthref1931 name=3Dsthref1931></A>ollowing general rules =
and=20
restrictions apply when using the <CODE>MODEL</CODE> clause:</P>
<UL>
  <LI>
  <P>The only columns that can be updated are the columns specified in =
the=20
  <CODE>MEASURES</CODE> subclause of the main SQL model. Measures of =
reference=20
  models cannot be updated.</P>
  <LI>
  <P>The <CODE>MODEL</CODE> clause is evaluated after all clauses in the =
query=20
  block except <CODE>SELECT</CODE> <CODE>DISTINCT</CODE>, and =
<CODE>ORDER</CODE>=20
  <CODE>BY</CODE> clause are evaluated. These clauses and expressions in =
the=20
  <CODE>SELECT</CODE> list are evaluated after the <CODE>MODEL</CODE>=20
clause.</P>
  <LI>
  <P>If your query has a <CODE>MODEL</CODE> clause, then the query's=20
  <CODE>SELECT</CODE> and <CODE>ORDER</CODE> <CODE>BY</CODE> lists =
cannot=20
  contain aggregates or analytic functions. If needed, these can be =
specified in=20
  <CODE>PARTITION</CODE> <CODE>BY</CODE>, <CODE>DIMENSION</CODE>=20
  <CODE>BY</CODE>, and <CODE>MEASURES</CODE> lists and need to be =
aliased.=20
  Aliases can then be used in the <CODE>SELECT</CODE> or =
<CODE>ORDER</CODE>=20
  <CODE>BY</CODE> clauses. In the following example, the analytic =
function=20
  <CODE>RANK</CODE> is specified and aliased in the =
<CODE>MEASURES</CODE> list=20
  of the <CODE>MODEL</CODE> clause, and its alias is used in the=20
  <CODE>SELECT</CODE> list so that the outer query can order resulting =
rows=20
  based on their ranks.</P><PRE class=3Doac_no_warn =
xml:space=3D"preserve">SELECT country, product, year, s, RNK
FROM (SELECT country, product, year, s, rnk
      FROM sales_view
      MODEL
        PARTITION BY (country) DIMENSION BY (product, year)
        MEASURES (sales s, year y, RANK() OVER (ORDER BY sales) rnk)
        RULES UPSERT
          (s['Bounce Increase 90-99', 2001] =3D
             REGR_SLOPE(s, y) ['Bounce', year BETWEEN 1990 AND 2000],
           s['Bounce', 2001] =3D s['Bounce', 2000] *=20
          (1+s['Bounce increase 90-99', 2001])))
WHERE product &lt;&gt; 'Bounce Increase 90-99'
ORDER BY country, year, rnk, product;

</PRE>
  <LI>
  <P>When there is a multi-cell reference on the right hand side of a =
rule, you=20
  need to apply a function to aggregate the measure values of multiple =
cells=20
  referenced into a single value. You can use any kind of aggregate =
function for=20
  this purpose: regular, OLAP aggregate (inverse percentile, =
hypothetical rank=20
  and distribution), or user-defined aggregate.</P>
  <LI>
  <P>Only rules with positional single cell references on the left side =
have=20
  <CODE>UPSERT</CODE> semantics. All other rules have =
<CODE>UPDATE</CODE>=20
  semantics, even when you specify the <CODE>UPSERT</CODE> option for =
them.</P>
  <LI>
  <P>Negative increments are not allowed in <CODE>FOR</CODE> loops. =
Also, no=20
  empty <CODE>FOR</CODE> loops are allowed. <CODE>FOR d FROM 2005 TO =
2001=20
  INCREMENT -1</CODE> is illegal. You should use <CODE>FOR d FROM 2005 =
TO 2001=20
  DECREMENT 1</CODE> instead. <CODE>FOR d FROM 2005 TO 2001 INCREMENT =
1</CODE>=20
  is illegal as it designates an empty loop.</P>
  <LI>
  <P>You cannot use nested query expressions (subqueries) in rules =
except in the=20
  <CODE>FOR</CODE> construct. For example, it would be illegal to issue =
the=20
  following:</P><PRE class=3Doac_no_warn xml:space=3D"preserve">SELECT *
FROM sales_view WHERE country =3D 'Poland'
MODEL DIMENSION BY (product, year)
  MEASURES (sales sales)
  RULES UPSERT
  (sales['Bounce', 2003] =3D sales['Bounce', 2002] +=20
   (SELECT SUM(sales) FROM sales_view));

</PRE>
  <P>This is because the rule has a subquery on its right side. Instead, =
you can=20
  rewrite the preceding query in the following legal way:</P><PRE =
class=3Doac_no_warn xml:space=3D"preserve">SELECT *
FROM sales_view WHERE country =3D 'Poland'
MODEL DIMENSION BY (product, year)
  MEASURES (sales sales, (SELECT SUM(sales) FROM sales_view) AS =
grand_total)
  RULES UPSERT
  (sales['Bounce', 2003] =3Dsales['Bounce', 2002] +=20
   grand_total['Bounce', 2002]);

</PRE>
  <LI>
  <P>You can also use subqueries in the <CODE>FOR</CODE> construct =
specified on=20
  the left side of a rule. However, they:</P>
  <UL>
    <LI>
    <P>Cannot be correlated</P>
    <LI>
    <P>Must return fewer than 10,000 rows</P>
    <LI>
    <P>Cannot be a query defined in the <CODE>WITH</CODE> clause</P>
    <LI>
    <P>Will make the cursor unsharable</P></LI></UL></LI></UL>
<P>Nested cell references have the following restrictions:</P>
<UL>
  <LI>
  <P>Nested cell references must be single cell references. Aggregates =
on nested=20
  cell references are not supported. So, it would be illegal to say=20
  <CODE>s['Bounce', MAX(best_year)['Bounce', ANY]]</CODE>.</P>
  <LI>
  <P>Only one level of nesting is supported for nested cell references =
on the=20
  main model. So, for example, <CODE>s['Bounce', best_year['Bounce',=20
  2001]]</CODE> is legal, but <CODE>s['Bounce', best_year['Bounce',=20
  best_year['Bounce', 2001]]]</CODE> is not.</P>
  <LI>
  <P>Nested cell references appearing on the left side of rules in an=20
  <CODE>AUTOMATIC</CODE> <CODE>ORDER</CODE> model should not be updated =
in any=20
  rule of the model. This restriction ensures that the rule dependency=20
  relationships do not arbitrarily change (and hence cause =
non-deterministic=20
  results) due to updates to reference measures.</P>
  <P>There is no such restriction on nested cell references in a=20
  <CODE>SEQUENTIAL</CODE> <CODE>ORDER</CODE> model. Also, this =
restriction is=20
  not applicable on nested references appearing on the right side of =
rules in=20
  both <CODE>SEQUENTIAL</CODE> or <CODE>AUTOMATIC</CODE> =
<CODE>ORDER</CODE>=20
  models.</P></LI></UL>
<P>Reference models have the following restrictions:</P>
<UL>
  <LI>
  <P>The query defining the reference model cannot be correlated to any =
outer=20
  query. It can, however, be a query with subqueries, views, and so =
on.</P>
  <LI>
  <P>Reference models cannot have a <CODE>PARTITION</CODE> =
<CODE>BY</CODE>=20
  clause.</P>
  <LI>
  <P>Reference models cannot be updated.</P></LI></UL>
<P>Window functions have the following restrictions:</P>
<UL>
  <LI>
  <P>The expressions in the <CODE>OVER</CODE> clause can be expressions =
of=20
  constants, measures, keys from <CODE>PARTITION</CODE> <CODE>BY</CODE> =
and=20
  <CODE>DIMENSION</CODE> <CODE>BY</CODE> of the <CODE>MODEL</CODE> =
clause, and=20
  single cell expressions. Aggregates are not permitted inside the=20
  <CODE>OVER</CODE> clause. Therefore, the following is okay:</P><PRE =
class=3Doac_no_warn xml:space=3D"preserve">rnk[ANY, ANY, ANY] =3D RANK() =
(PARTITION BY prod, country ORDER BY sale)

</PRE>
  <P>While the following is not:</P><PRE class=3Doac_no_warn =
xml:space=3D"preserve">rnk[ANY, ANY, ANY] =3D RANK() (PARTITION BY prod, =
country ORDER BY SUM(sale))

</PRE>
  <LI>
  <P>Rules with window functions on their right side cannot have an=20
  <CODE>ORDER</CODE> <CODE>BY</CODE> clause on their left side.</P>
  <LI>
  <P>Window functions and aggregate functions cannot both be on the =
right side=20
  of a rule.</P>
  <LI>
  <P>Window functions can only be used on the right side of an=20
  <CODE>UPDATE</CODE> rule.</P>
  <LI>
  <P>If a rule has a <CODE>FOR</CODE> loop on its left side, a window =
function=20
  cannot be used on the right side of the rule.</P></LI></UL></DIV><!-- =
class=3D"sect2" --></DIV><!-- class=3D"sect1" --><A=20
id=3DCHDBJDCC name=3DCHDBJDCC></A>
<DIV class=3Dsect1><A id=3Dsthref1932 name=3Dsthref1932></A>
<H2 class=3Dsect1><A id=3DDWHSG0226 name=3DDWHSG0226></A>Performance =
Considerations=20
with SQL Modeling</H2>
<P>The <A id=3Dsthref1933 name=3Dsthref1933></A>following sections =
describe topics=20
that affect performance when using the <CODE>MODEL</CODE> clause:</P>
<UL>
  <LI>
  <P><A=20
  =
href=3D"http://download.oracle.com/docs/cd/B19306_01/server.102/b14223/sq=
lmodel.htm#CHDDIGEB">Parallel=20
  Execution</A></P>
  <LI>
  <P><A=20
  =
href=3D"http://download.oracle.com/docs/cd/B19306_01/server.102/b14223/sq=
lmodel.htm#CHDHIBJD">Aggregate=20
  Computation</A></P>
  <LI>
  <P><A=20
  =
href=3D"http://download.oracle.com/docs/cd/B19306_01/server.102/b14223/sq=
lmodel.htm#CHDCIHBB">Using=20
  EXPLAIN PLAN to Understand Model Queries</A></P></LI></UL><A =
id=3DCHDDIGEB=20
name=3DCHDDIGEB></A>
<DIV class=3Dsect2><!-- infolevel=3D"all" infotype=3D"General" --><A =
id=3Dsthref1934=20
name=3Dsthref1934></A>
<H3 class=3Dsect2>Parallel Execution</H3>
<P><CODE>MODEL</CODE> c<A id=3Dsthref1935 name=3Dsthref1935></A>lause =
computation is=20
scalable in terms of the number of processors you have. Scalability is =
achieved=20
by performing the <CODE>MODEL</CODE> computation in parallel across the=20
partitions defined by the <CODE>PARTITION</CODE> <CODE>BY</CODE> clause. =
Data is=20
distributed among processing elements (also called parallel query =
slaves) based=20
on the <CODE>PARTITION</CODE> <CODE>BY</CODE> key values such that all =
rows with=20
the same values for the <CODE>PARTITION</CODE> <CODE>BY</CODE> keys will =
go to=20
the same slave. Note that the internal processing of partitions will not =
create=20
a one-to-one match of logical and internally processed partitions. This =
way,=20
each slave can finish <CODE>MODEL</CODE> clause computation independent =
of other=20
slaves. The data partitioning can be hash based or range based. Consider =
the=20
following <CODE>MODEL</CODE> clause:</P><PRE class=3Doac_no_warn =
xml:space=3D"preserve">MODEL=20
  PARTITION BY (country) DIMENSION BY (product, time) MEASURES (sales)
  RULES UPDATE
  (sales['Bounce', 2002] =3D 1.2 * sales['Bounce', 2001],
   sales['Car', 2002] =3D 0.8 * sales['Car', 2001])

</PRE>
<P>Here input data will be partitioned among slaves based on the=20
<CODE>PARTITION</CODE> <CODE>BY</CODE> key <CODE>country</CODE> and this =

partitioning can be hash or range based. Each slave will evaluate the =
rules on=20
the data it receives.</P>
<P>Parallelism of the model computation is governed or limited by the =
way you=20
specify the <CODE>MODEL</CODE> clause. If your <CODE>MODEL</CODE> clause =
has no=20
<CODE>PARTITION</CODE> <CODE>BY</CODE> keys, then the computation cannot =
be=20
parallelized (with exceptions mentioned in the following). If=20
<CODE>PARTITION</CODE> <CODE>BY</CODE> keys have very low cardinality, =
then the=20
degree of parallelism will be limited. In such cases, Oracle identifies =
the=20
<CODE>DIMENSION</CODE> <CODE>BY</CODE> keys that can used for =
partitioning. For=20
example, consider a <CODE>MODEL</CODE> clause equivalent to the =
preceding one,=20
but without <CODE>PARTITION</CODE> <CODE>BY</CODE> keys as in the =
following:</P><PRE class=3Doac_no_warn xml:space=3D"preserve">MODEL=20
  DIMENSION BY (country, product, time) MEASURES (sales)
  RULES UPDATE
  (sales[ANY, 'Bounce', 2002] =3D 1.2 * sales[CV(country), 'Bounce', =
2001],
   sales[ANY, 'Car', 2002] =3D 0.8 * sales[CV(country), 'Car', 2001])

</PRE>
<P>In this case, Oracle Database will identify that it can use the=20
<CODE>DIMENSION</CODE> <CODE>BY</CODE> key <CODE>country</CODE> for =
partitioning=20
and uses <CODE>region</CODE> as the basis of internal partitioning. It=20
partitions the data among slaves on <CODE>country</CODE> and thus =
effects=20
parallel execution.</P></DIV><!-- class=3D"sect2" --><A id=3DCHDHIBJD=20
name=3DCHDHIBJD></A>
<DIV class=3Dsect2><!-- infolevel=3D"all" infotype=3D"General" --><A =
id=3Dsthref1936=20
name=3Dsthref1936></A>
<H3 class=3Dsect2>Aggregate Computation</H3>
<P>The <CODE>MODEL</CODE> clause processes aggregates in two different =
ways:=20
first, the regular fashion in which data in the partition is scanned and =

aggregated and second, an efficient window style aggregation. The first =
type as=20
illustrated in the following introduces a new dimension member =
ALL_2002_products=20
and computes its value to be the sum of year 2002 sales for all =
products:</P><PRE class=3Doac_no_warn xml:space=3D"preserve">MODEL =
PARTITION BY (country) DIMENSION BY (product, time) MEASURES (sale =
sales)
RULES UPSERT=20
 (sales['ALL_2002_products', 2002] =3D SUM(sales)[ANY, 2002])

</PRE>
<P>To evaluate the aggregate sum in this case, each partition will be =
scanned to=20
find the cells for 2002 for all products and they will be aggregated. If =
the=20
left side of the rule were to reference multiple cells, then Oracle will =
have to=20
compute the right side aggregate by scanning the partition for each cell =

referenced on the left. For example, consider the following =
example:</P><PRE class=3Doac_no_warn xml:space=3D"preserve">MODEL =
PARTITION BY (country) DIMENSION BY (product, time)
  MEASURES (sale sales, 0 avg_exclusive)
  RULES UPDATE
  (avg_exclusive[ANY, 2002] =3D  AVG(sales)[product &lt;&gt; =
CV(product), CV(time)])

</PRE>
<P>This rule calculates a measure called <CODE>avg_exclusive</CODE> for =
every=20
product in 2002. The measure <CODE>avg_exclusive</CODE> is defined as =
the=20
average sales of all products excluding the current product. In this =
case,=20
Oracle scans the data in a partition for every product in 2002 to =
calculate the=20
aggregate, and this may be expensive.</P>
<P>Oracle Database will optimize the evaluation of such aggregates in =
some=20
scenarios with window-style computation as used in analytic functions. =
These=20
scenarios involve rules with multi-cell references on their left side =
and=20
computing window computations such as moving averages, cumulative sums =
and so=20
on. Consider the following example:</P><PRE class=3Doac_no_warn =
xml:space=3D"preserve">MODEL PARTITION BY (country) DIMENSION BY =
(product, time)
  MEASURES (sale sales, 0 mavg)
  RULES UPDATE
  (mavg[product IN ('Bounce', 'Y Box', 'Mouse Pad'), ANY] =3D
   AVG(sales)[CV(product), time BETWEEN CV(time)=20
   AND CV(time) - 2])

</PRE>
<P>It computes the moving average of sales for products Bounce, Y Box, =
and Mouse=20
Pad over a three year period. It would be very inefficient to evaluate =
the=20
aggregate by scanning the partition for every cell referenced on the =
left side.=20
Oracle identifies the computation as being in window-style and evaluates =
it=20
efficiently. It sorts the input on product, time and then scans the data =
once to=20
compute the moving average. You can view this rule as an analytic =
function being=20
applied on the sales data for products Bounce, Y Box, and Mouse =
Pad:</P><PRE class=3Doac_no_warn xml:space=3D"preserve">AVG(sales) OVER =
(PARTITION BY product ORDER BY time
RANGE BETWEEN 2 PRECEDING AND CURRENT ROW)

</PRE>
<P>This computation style is called <CODE>WINDOW (IN MODEL) SORT</CODE>. =
This=20
style of aggregation is applicable when the rule has a multi-cell =
reference on=20
its left side with no <CODE>ORDER</CODE> <CODE>BY</CODE>, has a simple =
aggregate=20
(<CODE>SUM</CODE>, <CODE>COUNT</CODE>, <CODE>MIN</CODE>, =
<CODE>MAX</CODE>,=20
<CODE>STDEV</CODE>, and <CODE>VAR</CODE>) on its right side, only one =
dimension=20
on the right side has a boolean predicate (<CODE>&lt;</CODE>,=20
<CODE>&lt;=3D</CODE>, <CODE>&gt;</CODE>, <CODE>&gt;=3D</CODE>,=20
<CODE>BETWEEN</CODE>), and all other dimensions on the right are =
qualified with=20
<CODE>CV</CODE>.</P></DIV><!-- class=3D"sect2" --><A id=3DCHDCIHBB=20
name=3DCHDCIHBB></A>
<DIV class=3Dsect2><A id=3Dsthref1937 name=3Dsthref1937></A>
<H3 class=3Dsect2>Using EXPLAIN PLAN to Understand Model Queries</H3>
<P>Oracle's explain plan facility is fully aware of models. You will see =
a line=20
in your query's main explain plan output showing the model and the =
algorithm=20
used. Reference models are tagged with the keyword =
<CODE>REFERENCE</CODE> in the=20
plan output. Also, Oracle annotates the plan with <CODE>WINDOW (IN =
MODEL)=20
SORT</CODE> if any of the rules qualify for window-style aggregate=20
computation.</P>
<P>By examining an explain plan, you can find out the algorithm chosen =
to=20
evaluate your model. If your model has <CODE>SEQUENTIAL</CODE>=20
<CODE>ORDER</CODE> semantics, then <CODE>ORDERED</CODE> is displayed. =
For=20
<CODE>AUTOMATIC</CODE> <CODE>ORDER</CODE> models, Oracle displays=20
<CODE>ACYCLIC</CODE> or <CODE>CYCLIC</CODE> based on whether it chooses=20
<CODE>ACYCLIC</CODE> or <CODE>CYCLIC</CODE> algorithm for evaluation. In =

addition, the plan output will have an annotation <CODE>FAST</CODE> in =
case of=20
<CODE>ORDERED</CODE> and <CODE>ACYCLIC</CODE> algorithms if all left =
side cell=20
references are single cell references and aggregates, if any, on the =
right side=20
of rules are simple arithmetic non-distinct aggregates like =
<CODE>SUM</CODE>,=20
<CODE>COUNT</CODE>, <CODE>AVG</CODE>, and so on. Rule evaluation in this =
case=20
would be highly efficient and hence the annotation <CODE>FAST</CODE>. =
Thus, the=20
output you will see in the explain plan would be <CODE>MODEL {ORDERED =
[FAST] |=20
ACYCLIC [FAST] | CYCLIC}</CODE>.</P>
<DIV class=3Dsect3><A id=3Dsthref1938 name=3Dsthref1938></A>
<H4 class=3Dsect3>Using ORDERED FAST: Example</H4>
<P>This model has only single cell references on the left side of rules =
and the=20
aggregate <CODE>AVG</CODE> on the right side of first rule is a simple=20
non-distinct aggregate:</P><PRE class=3Doac_no_warn =
xml:space=3D"preserve">EXPLAIN PLAN FOR
SELECT country, prod, year, sales
FROM sales_view
WHERE country IN ('Italy', 'Japan')
MODEL UNIQUE DIMENSION
  PARTITION BY (country) DIMENSION BY (prod, year) MEASURES (sale sales)
  RULES UPSERT
  (sales['Bounce', 2003] =3D AVG(sales)[ANY, 2002] * 1.24,
   sales['Y Box', 2003] =3D sales['Bounce', 2003] * 0.25);
</PRE></DIV><!-- class=3D"sect3" -->
<DIV class=3Dsect3><A id=3Dsthref1939 name=3Dsthref1939></A>
<H4 class=3Dsect3>Using ORDERED: Example</H4>
<P>Because the left side of the second rule is a multi-cell reference, =
the=20
<CODE>FAST</CODE> method will not be chosen in the following:</P><PRE =
class=3Doac_no_warn xml:space=3D"preserve">EXPLAIN PLAN FOR
SELECT country, prod, year, sales
FROM sales_view
WHERE country IN ('Italy', 'Japan')
MODEL UNIQUE DIMENSION
  PARTITION BY (country) DIMENSION BY (prod, year) MEASURES (sale sales)
  RULES UPSERT
  (sales['Bounce', 2003] =3D AVG(sales)[ANY, 2002] * 1.24,
   sales[prod &lt;&gt; 'Bounce', 2003] =3D sales['Bounce', 2003] * =
0.25);
</PRE></DIV><!-- class=3D"sect3" -->
<DIV class=3Dsect3><A id=3Dsthref1940 name=3Dsthref1940></A>
<H4 class=3Dsect3>Using ACYCLIC FAST: Example</H4>
<P>Rules in this model are not cyclic and the explain plan will show=20
<CODE>ACYCLIC</CODE>. The <CODE>FAST</CODE> method is chosen in this =
case as=20
well.</P><PRE class=3Doac_no_warn xml:space=3D"preserve">EXPLAIN PLAN =
FOR
SELECT country, prod, year, sales
FROM sales_view
WHERE country IN ('Italy', 'Japan')
MODEL UNIQUE DIMENSION
  PARTITION BY (country) DIMENSION BY (prod, year) MEASURES (sale sales)
  RULES UPSERT AUTOMATIC ORDER
  (sales['Y Box', 2003] =3D sales['Bounce', 2003] * 0.25,
   sales['Bounce', 2003] =3D sales['Bounce', 2002] / SUM(sales)[ANY, =
2002] * 2 *
   sales['All Products', 2003],
   sales['All Products', 2003] =3D 200000);
</PRE></DIV><!-- class=3D"sect3" -->
<DIV class=3Dsect3><A id=3Dsthref1941 name=3Dsthref1941></A>
<H4 class=3Dsect3>Using ACYCLIC: Example</H4>
<P>Rules in this model are not cyclic. The <CODE>PERCENTILE_DISC</CODE>=20
aggregate that gives the median sales for year 2002, in the second rule =
is not a=20
simple aggregate function. Therefore, Oracle will not choose the=20
<CODE>FAST</CODE> method, and the explain plan will just show=20
<CODE>ACYCLIC</CODE>.</P><PRE class=3Doac_no_warn =
xml:space=3D"preserve">SELECT country, prod, year, sales
FROM sales_view
WHERE country IN ('Italy', 'Japan')
MODEL UNIQUE DIMENSION
  PARTITION BY (country) DIMENSION BY (prod, year) MEASURES (sale sales)
  RULES UPSERT AUTOMATIC ORDER
  (sales['Y Box', 2003] =3D sales['Bounce', 2003] * 0.25,
   sales['Bounce',2003] =3D PERCENTILE_DISC(0.5) WITHIN GROUP (ORDER BY
   sales)[ANY,2002] / SUM(sales)[ANY, 2002] * 2 * sales['All Products', =
2003],
   sales['All Products', 2003] =3D 200000);
</PRE></DIV><!-- class=3D"sect3" -->
<DIV class=3Dsect3><A id=3Dsthref1942 name=3Dsthref1942></A>
<H4 class=3Dsect3>Using CYCLIC: Example</H4>
<P>Oracle chooses <CODE>CYCLIC</CODE> algorithm for this model as there =
is a=20
cycle among second and third rules.</P><PRE class=3Doac_no_warn =
xml:space=3D"preserve">EXPLAIN PLAN FOR
SELECT country, prod, year, sales
FROM sales_view
WHERE country IN ('Italy', 'Japan')
MODEL UNIQUE DIMENSION
  PARTITION BY (country) DIMENSION BY (prod, year) MEASURES (sale sales)
  IGNORE NAV RULES UPSERT AUTOMATIC ORDER
  (sales['All Products', 2003] =3D 200000,
   sales['Y Box', 2003] =3D sales['Bounce', 2003] * 0.25,
   sales['Bounce', 2003] =3D sales['Y Box', 2003] +=20
    (sales['Bounce', 2002] / SUM(sales)[ANY, 2002] * 2 *=20
     sales['All Products', 2003]));
</PRE></DIV><!-- class=3D"sect3" --></DIV><!-- class=3D"sect2" =
--></DIV><!-- class=3D"sect1" --><A=20
id=3Di1006326 name=3Di1006326></A>
<DIV class=3Dsect1><A id=3Dsthref1943 name=3Dsthref1943></A>
<H2 class=3Dsect1>Examples of SQL Modeling</H2>
<P>The examples in this section assume that in addition to=20
<CODE>sales_view</CODE>, you have the following view defined. It finds =
monthly=20
totals of sales and quantities by product and country.</P><PRE =
class=3Doac_no_warn xml:space=3D"preserve">CREATE VIEW sales_view2 AS
SELECT country_name country, prod_name product, calendar_year year,
  calendar_month_name month, SUM(amount_sold) sale, COUNT(amount_sold) =
cnt
FROM sales, times, customers, countries, products
WHERE sales.time_id =3D times.time_id AND
      sales.prod_id =3D products.prod_id AND
      sales.cust_id =3D customers.cust_id AND
      customers.country_id =3D countries.country_id
GROUP BY country_name, prod_name, calendar_year, calendar_month_name;
</PRE><BR>
<P class=3Dseghead><A id=3Dsthref1944 name=3Dsthref1944></A>Example 1 =
Calculating=20
Sales Differences</P>
<P>Show the sales for Italy and Spain and the difference between the two =
for=20
each product. The difference should be placed in a new row with =
<CODE>country =3D=20
'Diff Italy-Spain'</CODE>.</P><PRE class=3Doac_no_warn =
xml:space=3D"preserve">SELECT product, country, sales
FROM sales_view
WHERE country IN ('Italy', 'Spain')
GROUP BY product, country
MODEL=20
  PARTITION BY (product) DIMENSION BY (country) MEASURES (SUM(sales) AS =
sales)
  RULES UPSERT
  (sales['DIFF ITALY-SPAIN'] =3D sales['Italy'] - sales['Spain']);
</PRE>
<P class=3Dseghead><A id=3Dsthref1945 name=3Dsthref1945></A>Example 2 =
Calculating=20
Percentage Change</P>
<P>If sales for each product in each country grew (or declined) at the =
same=20
monthly rate from November 2000 to December 2000 as they did from =
October 2000=20
to November 2000, what would the fourth quarter's sales be for the whole =
company=20
and for each country?</P><PRE class=3Doac_no_warn =
xml:space=3D"preserve">SELECT country, SUM(sales)
FROM (SELECT product, country, month, sales
      FROM sales_view2
      WHERE year=3D2000 AND month IN ('October','November')
MODEL=20
  PARTITION BY (product, country) DIMENSION BY (month) MEASURES (sale =
sales)
  RULES
   (sales['December']=3D(sales['November'] /sales['October']) =
*sales['November']))
GROUP BY GROUPING SETS ((),(country));
</PRE>
<P class=3Dseghead><A id=3Dsthref1946 name=3Dsthref1946></A>Example 3 =
Calculating Net=20
Present Value</P>
<P>You <A id=3Dsthref1947 name=3Dsthref1947></A>want to calculate the =
net present=20
value (NPV) of a series of periodic cash flows. Your scenario involves =
two=20
projects, each of which starts with an initial investment at time 0, =
represented=20
as a negative cash flow. The initial investment is followed by three =
years of=20
positive cash flow. First, create a table (<CODE>cash_flow</CODE>) and =
populate=20
it with some data, as in the following statements:</P><PRE =
class=3Doac_no_warn xml:space=3D"preserve">CREATE TABLE cash_flow (year =
DATE, i INTEGER, prod VARCHAR2(3), amount NUMBER);
INSERT INTO cash_flow VALUES (TO_DATE('1999', 'YYYY'),  0,  'vcr',  =
-100.00);
INSERT INTO cash_flow VALUES (TO_DATE('2000', 'YYYY'),  1,  'vcr',   =
12.00);
INSERT INTO cash_flow VALUES (TO_DATE('2001', 'YYYY'),  2,  'vcr',  =
10.00);
INSERT INTO cash_flow VALUES (TO_DATE('2002', 'YYYY'),  3,  'vcr',  =
20.00);
INSERT INTO cash_flow VALUES (TO_DATE('1999', 'YYYY'),  0,  'dvd',  =
-200.00);
INSERT INTO cash_flow VALUES (TO_DATE('2000', 'YYYY'),  1,  'dvd',  =
22.00);
INSERT INTO cash_flow VALUES (TO_DATE('2001', 'YYYY'),  2,  'dvd',  =
12.00);
INSERT INTO cash_flow VALUES (TO_DATE('2002', 'YYYY'),  3,  'dvd',  =
14.00);

</PRE>
<P>To calculate the NPV using a discount rate of 0.14, issue the =
following=20
statement:</P><PRE class=3Doac_no_warn xml:space=3D"preserve">SELECT =
year, i, prod, amount, npv
FROM cash_flow
MODEL PARTITION BY (prod)
  DIMENSION BY (i)
  MEASURES (amount, 0 npv, year)
  RULES
    (npv[0] =3D amount[0],
     npv[i !=3D0] ORDER BY i =3D
       amount[CV()]/ POWER(1.14,CV(i)) + npv[CV(i)-1]);=20

YEAR               I PRO     AMOUNT        NPV
--------- ---------- --- ---------- ----------
01-AUG-99          0 dvd       -200       -200
01-AUG-00          1 dvd         22 -180.70175
01-AUG-01          2 dvd         12 -171.46814
01-AUG-02          3 dvd         14 -162.01854
01-AUG-99          0 vcr       -100       -100
01-AUG-00          1 vcr         12 -89.473684
01-AUG-01          2 vcr         10 -81.779009
01-AUG-02          3 vcr         20 -68.279579
</PRE>
<P class=3Dseghead><A id=3Dsthref1948 name=3Dsthref1948></A>Example 4 =
Calculating=20
Using Simultaneous Equations</P>
<P>You <A id=3Dsthref1949 name=3Dsthref1949></A>want your interest =
expenses to equal=20
30% of your net income (net=3Dpay minus tax minus interest). Interest is =
tax=20
deductible from gross, and taxes are 38% of salary and 28% capital =
gains. You=20
have salary of $100,000 and capital gains of $15,000. Net income, taxes, =
and=20
interest expenses are unknown. Observe that this is a simultaneous =
equation (net=20
depends on interest, which depends on net), thus the =
<CODE>ITERATE</CODE> clause=20
is included.</P>
<P>First, create a table called <CODE>ledger</CODE>:</P><PRE =
class=3Doac_no_warn xml:space=3D"preserve">CREATE TABLE  ledger  =
(account  VARCHAR2(20), balance  NUMBER(10,2) );

</PRE>
<P>Then, insert the following five rows:</P><PRE class=3Doac_no_warn =
xml:space=3D"preserve">INSERT INTO ledger VALUES  ('Salary', 100000);
INSERT INTO ledger VALUES  ('Capital_gains', 15000);
INSERT INTO ledger VALUES  ('Net', 0);
INSERT INTO ledger VALUES  ('Tax', 0);
INSERT INTO ledger VALUES  ('Interest', 0);

</PRE>
<P>Next, issue the following statement:</P><PRE class=3Doac_no_warn =
xml:space=3D"preserve">SELECT s, account
FROM ledger=20
MODEL=20
  DIMENSION  BY (account) MEASURES (balance s)
  RULES  ITERATE (100)
  (s['Net']=3Ds['Salary']-s['Interest']-s['Tax'],
 s['Tax']=3D(s['Salary']-s['Interest'])*0.38 + s['Capital_gains']*0.28,
  s['Interest']=3Ds['Net']*0.30);

</PRE>
<P>The output (with numbers rounded) is:</P><PRE class=3Doac_no_warn =
xml:space=3D"preserve">S ACCOUNT
---------- --------------------
    100000 Salary
     15000 Capital_gains
48735.2445 Net
36644.1821 Tax
14620.5734 Interest
</PRE>
<P class=3Dseghead><A id=3Dsthref1950 name=3Dsthref1950></A>Example 5 =
Calculating=20
Using Regression</P>
<P>The sales of Bounce in 2001 will increase in comparison to 2000 as =
they did=20
in the last three years (between 1998 and 2000). To calculate the =
increase, use=20
the regression function <CODE>REGR_SLOPE</CODE> as follows. Because we =
are=20
calculating the next period's value, it is sufficient to add the slope =
to the=20
2000 value.</P><PRE class=3Doac_no_warn xml:space=3D"preserve">SELECT * =
FROM
 (SELECT country, product, year, projected_sale, sales
  FROM sales_view
  WHERE country IN ('Italy', 'Japan') AND product IN ('Bounce')
MODEL
  PARTITION BY (country) DIMENSION BY (product, year)
  MEASURES (sales sales, year y, CAST(NULL AS NUMBER) projected_sale) =
IGNORE NAV
  RULES UPSERT
  (projected_sale[FOR product IN ('Bounce'), 2001] =3D=20
             sales[CV(), 2000] +=20
             REGR_SLOPE(sales, y)[CV(), year BETWEEN 1998 AND 2000]))
ORDER BY country, product, year;

</PRE>
<P>The output is as follows:</P><PRE class=3Doac_no_warn =
xml:space=3D"preserve">COUNTRY    PRODUCT           YEAR   =
PROJECTED_SALE  SALES
-------    -------           ----   --------------  -------
Italy      Bounce            1999                    2474.78
Italy      Bounce            2000                    4333.69
Italy      Bounce            2001           6192.6   4846.3
Japan      Bounce            1999                    2961.3
Japan      Bounce            2000                    5133.53
Japan      Bounce            2001          7305.76   6303.6
</PRE>
<P class=3Dseghead><A id=3Dsthref1951 name=3Dsthref1951></A>Example 6 =
Calculating=20
Mortgage Amortization</P>
<P>This<A id=3Dsthref1952 name=3Dsthref1952></A><A id=3Dsthref1953=20
name=3Dsthref1953></A> example creates mortgage amortization tables for =
any number=20
of customers, using information about mortgage loans selected from a =
table of=20
mortgage facts. First, create two tables and insert needed data:</P>
<UL>
  <LI>
  <P><CODE>mortgage_facts</CODE></P>
  <P>Holds information about individual customer loans, including the =
name of=20
  the customer, the fact about the loan that is stored in that row, and =
the=20
  value of that fact. The facts stored for this example are loan=20
  (<CODE>Loan</CODE>), annual interest rate =
(<CODE>Annual_Interest</CODE>), and=20
  number of payments (<CODE>Payments</CODE>) for the loan. Also, the =
values for=20
  two customers, Smith and Jones, are inserted.</P><PRE =
class=3Doac_no_warn xml:space=3D"preserve">CREATE TABLE mortgage_facts =
(customer VARCHAR2(20), fact VARCHAR2(20),
  amount  NUMBER(10,2));
INSERT INTO mortgage_facts  VALUES ('Smith', 'Loan', 100000);
INSERT INTO mortgage_facts  VALUES ('Smith', 'Annual_Interest', 12);
INSERT INTO mortgage_facts  VALUES ('Smith', 'Payments', 360);
INSERT INTO mortgage_facts  VALUES ('Smith', 'Payment', 0);
INSERT INTO mortgage_facts  VALUES ('Jones', 'Loan', 200000);
INSERT INTO mortgage_facts  VALUES ('Jones', 'Annual_Interest', 12);
INSERT INTO mortgage_facts  VALUES ('Jones', 'Payments', 180);
INSERT INTO mortgage_facts  VALUES ('Jones', 'Payment', 0);

</PRE>
  <LI>
  <P><CODE>mortgage</CODE></P>
  <P>Holds output information for the calculations. The columns are =
customer,=20
  payment number (<CODE>pmt_num</CODE>), principal applied in that =
payment=20
  (<CODE>principalp</CODE>), interest applied in that payment=20
  (<CODE>interestp</CODE>), and remaining loan balance=20
  (<CODE>mort_balance</CODE>). In order to upsert new cells into a =
partition,=20
  you need to have at least one row pre-existing per partition. =
Therefore, we=20
  seed the mortgage table with the values for the two customers before =
they have=20
  made any payments. This seed information could be easily generated =
using a SQL=20
  <CODE>INSERT</CODE> statement based on the <CODE>mortgage_facts</CODE> =

  table.</P></LI></UL><PRE class=3Doac_no_warn =
xml:space=3D"preserve">CREATE TABLE mortgage_facts (customer =
VARCHAR2(20), fact VARCHAR2(20),=20
   amount  NUMBER(10,2));

INSERT INTO mortgage_facts  VALUES ('Smith', 'Loan', 100000);
INSERT INTO mortgage_facts  VALUES ('Smith', 'Annual_Interest', 12);
INSERT INTO mortgage_facts  VALUES ('Smith', 'Payments', 360);
INSERT INTO mortgage_facts  VALUES ('Smith', 'Payment', 0);
INSERT INTO mortgage_facts  VALUES ('Jones', 'Loan', 200000);
INSERT INTO mortgage_facts  VALUES ('Jones', 'Annual_Interest', 12);
INSERT INTO mortgage_facts  VALUES ('Jones', 'Payments', 180);
INSERT INTO mortgage_facts  VALUES ('Jones', 'Payment', 0);

CREATE TABLE mortgage (customer VARCHAR2(20), pmt_num NUMBER(4),
   principalp NUMBER(10,2), interestp NUMBER(10,2), mort_balance =
NUMBER(10,2));

INSERT INTO mortgage VALUES ('Jones',0, 0, 0, 200000);
INSERT INTO mortgage VALUES ('Smith',0, 0, 0, 100000);

</PRE>
<P>The following SQL statement is complex, so individual lines have been =

annotated as needed. These lines are explained in more detail =
later.</P><PRE class=3Doac_no_warn xml:space=3D"preserve">SELECT c, p, =
m, pp, ip
FROM MORTGAGE
MODEL                                                                  =
--See 1
REFERENCE R ON
   (SELECT customer, fact, amt                                         =
--See 2
    FROM mortgage_facts
    MODEL DIMENSION BY (customer, fact) MEASURES (amount amt)          =
--See 3
      RULES
       (amt[any, 'PaymentAmt']=3D (amt[CV(),'Loan']*
          Power(1+ (amt[CV(),'Annual_Interest']/100/12),
                  amt[CV(),'Payments']) *
         (amt[CV(),'Annual_Interest']/100/12)) /
         (Power(1+(amt[CV(),'Annual_Interest']/100/12),
                amt[CV(),'Payments']) - 1)
       )
    )
  DIMENSION BY (customer cust, fact) measures (amt)                     =
--See 4
MAIN amortization
  PARTITION BY (customer c)                                             =
--See 5
  DIMENSION BY (0 p)                                                    =
--See 6
  MEASURES (principalp pp, interestp ip, mort_balance m, customer mc)   =
--See 7
  RULES
    ITERATE(1000) UNTIL (ITERATION_NUMBER+1 =3D
r.amt[mc[0],'Payments'])                                                =
--See 8
    (ip[ITERATION_NUMBER+1] =3D m[CV()-1] *
       r.amt[mc[0], 'Annual_Interest']/1200,                            =
--See 9
     pp[ITERATION_NUMBER+1] =3D r.amt[mc[0], 'PaymentAmt'] - ip[CV()],   =
 --See 10
      m[ITERATION_NUMBER+1] =3D m[CV()-1] - pp[CV()]                     =
 --See 11
    )
ORDER BY c, p;

</PRE>
<P>The following numbers refer to the numbers listed in the example:</P>
<P>1: This is the start of the main model definition.</P>
<P>2 through 4: These lines mark the start and end of the reference =
model=20
labeled <CODE>R</CODE>. This model defines a <CODE>SELECT</CODE> =
statement that=20
calculates the monthly payment amount for each customer's loan. The=20
<CODE>SELECT</CODE> statement uses its own <CODE>MODEL</CODE> clause =
starting at=20
the line labeled 3 with a single rule that defines the <CODE>amt</CODE> =
value=20
based on information from the <CODE>mortgage_facts</CODE> table. The =
measure=20
returned by reference model <CODE>R</CODE> is <CODE>amt</CODE>, =
dimensioned by=20
customer name <CODE>cust</CODE> and fact value <CODE>fact</CODE> as =
defined in=20
the line labeled 4.</P>
<P>The reference model is computed once and the values are then used in =
the main=20
model for computing other calculations. Reference model <CODE>R</CODE> =
will=20
return a row for each existing row of <CODE>mortgage_fact</CODE>, and it =
will=20
return the newly calculated rows for each customer where the fact type =
is=20
<CODE>Payment</CODE> and the <CODE>amt</CODE> is the monthly payment =
amount. If=20
we wish to use a specific amount from the <CODE>R</CODE> output, we =
address it=20
with the expression=20
<CODE>r.amt[&lt;customer_name&gt;,&lt;fact_name&gt;]</CODE>.</P>
<P>5: This is the continuation of the main model definition. We will =
partition=20
the output by customer, aliased as <CODE>c</CODE>.</P>
<P>6: The main model is dimensioned with a constant value of 0, aliased =
as=20
<CODE>p</CODE>. This represents the payment number of a row.</P>
<P>7: Four measures are defined: <CODE>principalp (pp)</CODE> is the =
principal=20
amount applied to the loan in the month, <CODE>interestp (ip)</CODE> is =
the=20
interest paid that month, <CODE>mort_balance (m)</CODE> is the remaining =

mortgage value after the payment of the loan, and <CODE>customer =
(mc)</CODE> is=20
used to support the partitioning.</P>
<P>8: This begins the rules block. It will perform the rule calculations =
up to=20
1000 times. Because the calculations are performed once for each month =
for each=20
customer, the maximum number of months that can be specified for a loan =
is 1000.=20
Iteration is stopped when the <CODE>ITERATION_NUMBER+1</CODE> equals the =
amount=20
of payments derived from reference <CODE>R</CODE>. Note that the value =
from=20
reference <CODE>R</CODE> is the <CODE>amt</CODE> (amount) measure =
defined in the=20
reference clause. This reference value is addressed as=20
<CODE>r.amt[&lt;customer_name&gt;,&lt;fact&gt;]</CODE>. The expression =
used in=20
the iterate line, <CODE>"r.amt[mc[0], 'Payments']"</CODE> is resolved to =
be the=20
amount from reference <CODE>R</CODE>, where the customer name is the =
value=20
resolved by <CODE>mc[0]</CODE>. Since each partition contains only one =
customer,=20
<CODE>mc[0]</CODE> can have only one value. Thus <CODE>"r.amt[mc[0],=20
'Payments']"</CODE> yields the reference clause's value for the number =
of=20
payments for the current customer. This means that the rules will be =
performed=20
as many times as there are payments for that customer.</P>
<P>9 through 11: The first two rules in this block use the same type of=20
<CODE>r.amt</CODE> reference that was explained in 8. The difference is =
that the=20
ip rule defines the fact value as <CODE>Annual_Interest</CODE>. Note =
that each=20
rule refers to the value of one of the other measures. The expression =
used on=20
the left side of each rule, <CODE>"[ITERATION_NUMBER+1]"</CODE> will =
create a=20
new dimension value, so the measure will be upserted into the result =
set. Thus=20
the result will include a monthly amortization row for all payments for =
each=20
customer.</P>
<P>The final line of the example sorts the results by customer and loan =
payment=20
number.</P></DIV><!-- class=3D"sect1" --></DIV>
<DIV class=3Dfooter>
<HR>

<TABLE class=3D"simple oac_no_warn" cellSpacing=3D0 cellPadding=3D0 =
width=3D"100%"=20
summary=3D"">
  <COLGROUP>
  <COL width=3D"33%">
  <COL width=3D*>
  <COL width=3D"33%">
  <TBODY>
  <TR>
    <TD align=3Dleft>
      <TABLE class=3D"simple oac_no_warn" cellSpacing=3D0 =
cellPadding=3D0 width=3D98=20
      summary=3D"">
        <TBODY>
        <TR>
          <TD vAlign=3Dtop align=3Dmiddle><A=20
            =
href=3D"http://download.oracle.com/docs/cd/B19306_01/server.102/b14223/an=
alysis.htm"><IMG=20
            height=3D24 alt=3D"Go to previous page"=20
            =
src=3D"http://download.oracle.com/docs/cd/B19306_01/dcommon/gifs/leftnav.=
gif"=20
            width=3D24><BR><SPAN class=3Dicon>Previous</SPAN></A></TD>
          <TD vAlign=3Dtop align=3Dmiddle><A=20
            =
href=3D"http://download.oracle.com/docs/cd/B19306_01/server.102/b14223/bi=
.htm"><IMG=20
            height=3D24 alt=3D"Go to next page"=20
            =
src=3D"http://download.oracle.com/docs/cd/B19306_01/dcommon/gifs/rightnav=
.gif"=20
            width=3D24><BR><SPAN =
class=3Dicon>Next</SPAN></A></TD></TR></TBODY></TABLE></TD>
    <TD class=3Dcopyrightlogo style=3D"FONT-SIZE: 90%" =
align=3Dmiddle><IMG height=3D18=20
      alt=3DOracle=20
      =
src=3D"http://download.oracle.com/docs/cd/B19306_01/dcommon/gifs/oracle.g=
if"=20
      width=3D144><BR>Copyright&nbsp;=A9&nbsp;2001,=20
      2005,&nbsp;Oracle.&nbsp;All&nbsp;rights&nbsp;reserved.<BR><A=20
      =
href=3D"http://download.oracle.com/docs/cd/B19306_01/dcommon/html/cpyr.ht=
m">Legal=20
      Notices</A></TD>
    <TD align=3Dright>
      <TABLE class=3D"icons oac_no_warn" cellSpacing=3D0 cellPadding=3D0 =
width=3D294=20
      summary=3D"">
        <TBODY>
        <TR>
          <TD vAlign=3Dtop align=3Dmiddle><A=20
            href=3D"http://www.oracle.com/pls/db102/homepage"><IMG =
height=3D24=20
            alt=3D"Go to Documentation Home"=20
            =
src=3D"http://download.oracle.com/docs/cd/B19306_01/dcommon/gifs/doclib.g=
if"=20
            width=3D24><BR><SPAN class=3Dicon>Home</SPAN></A></TD>
          <TD vAlign=3Dtop align=3Dmiddle><A=20
            =
href=3D"http://www.oracle.com/pls/db102/portal.all_books"><IMG=20
            height=3D24 alt=3D"Go to Book List"=20
            =
src=3D"http://download.oracle.com/docs/cd/B19306_01/dcommon/gifs/booklist=
.gif"=20
            width=3D24><BR><SPAN class=3Dicon>Book List</SPAN></A></TD>
          <TD vAlign=3Dtop align=3Dmiddle><A=20
            =
href=3D"http://download.oracle.com/docs/cd/B19306_01/server.102/b14223/to=
c.htm"><IMG=20
            height=3D24 alt=3D"Go to Table of Contents"=20
            =
src=3D"http://download.oracle.com/docs/cd/B19306_01/dcommon/gifs/toc.gif"=
=20
            width=3D24><BR><SPAN class=3Dicon>Contents</SPAN></A></TD>
          <TD vAlign=3Dtop align=3Dmiddle><A=20
            =
href=3D"http://download.oracle.com/docs/cd/B19306_01/server.102/b14223/in=
dex.htm"><IMG=20
            height=3D24 alt=3D"Go to Index"=20
            =
src=3D"http://download.oracle.com/docs/cd/B19306_01/dcommon/gifs/index.gi=
f"=20
            width=3D24><BR><SPAN class=3Dicon>Index</SPAN></A></TD>
          <TD vAlign=3Dtop align=3Dmiddle><A=20
            href=3D"http://www.oracle.com/pls/db102/show_mindex"><IMG =
height=3D24=20
            alt=3D"Go to Master Index"=20
            =
src=3D"http://download.oracle.com/docs/cd/B19306_01/dcommon/gifs/masterix=
.gif"=20
            width=3D24><BR><SPAN class=3Dicon>Master =
Index</SPAN></A></TD>
          <TD vAlign=3Dtop align=3Dmiddle><A=20
            =
href=3D"http://download.oracle.com/docs/cd/B19306_01/dcommon/html/feedbac=
k.htm"><IMG=20
            height=3D24 alt=3D"Go to Feedback page"=20
            =
src=3D"http://download.oracle.com/docs/cd/B19306_01/dcommon/gifs/feedbck2=
.gif"=20
            width=3D24><BR><SPAN class=3Dicon>Contact=20
      =
Us</SPAN></A></TD></TR></TBODY></TABLE></TD></TR></TBODY></TABLE></DIV><N=
OSCRIPT>
<P>Scripting on this page enhances content navigation, but does not =
change the=20
content in any way.</P></NOSCRIPT></BODY></HTML>

------=_NextPart_000_0071_01CC4B21.DFBC3800
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: http://download.oracle.com/docs/cd/B19306_01/dcommon/gifs/doclib.gif

R0lGODlhGAAYAPMAMf///+/v99be58bO1q29zpytvYScrXuMnGuMrWN7jEpzjEJjhDlaczFKawAA
AAAAACwAAAAAGAAYAEAEvxDISautjKV2EMoJ2DVhgy2hh5Aa6TUtdhTGYXNFbhQDcTAmCojz0ohW
GUYFBlt8kslPwiC4DBZAkkCwyTQ426pwgU2EGCiskRWcoDcqWCixGMXGmc5qjrZvMEZxfHVIfxeH
iImKFwQFBI11AzkDkgYoB2RLQAkCAQRAWQkHBiELbRJGGnQspQhnGRgbTpasaAimJbENTpi1TrhA
sba3rA0ewKcARrOmy79suk63IGR1uF/C0mclCL0aA4vh4osRADs=

------=_NextPart_000_0071_01CC4B21.DFBC3800
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: http://download.oracle.com/docs/cd/B19306_01/dcommon/gifs/booklist.gif

R0lGODlhGAAYAPMAMf////f3/97n773O3rXG1qW1zoScvWuMpVp7nEprjDFScyFCWhApQgAYKQAI
EAAAACwAAAAAGAAYAEAEyxDISau9AjmmjlrNkxRDYQzCJQnHsjjIgDAcghxGkVoF2NCMxuIwUK0U
DJsh8Xg4GtAhDmWclEw4g2FXBcigD0a3kkQofowF49FAcCsC9XJNUxh8w9Ob4lIkEgt2AAUKIlo6
XVpKSodFYxN7j5IqPUFQDQaTCR9CaUELJ10CHAcIajQbCAUkKpsMGwqmDgsCJgk5jhRxCwhzTWlP
P72IFYR/vWpRCQMDh5ESPQsJDQkCLCDSWUbNZzQuNzc4BWMmir0HJLljJTmsk5IRADs=

------=_NextPart_000_0071_01CC4B21.DFBC3800
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: http://download.oracle.com/docs/cd/B19306_01/dcommon/gifs/toc.gif

R0lGODlhGAAYAPMAMf////f//+/v787W58bGzqW1zqWtvYyltXuUpWN7jFp7pUprjEprhDFSawAA
AAAAACwAAAAAGAAYAEAEuhDISautSyW0jCCEMHyE0SCCxWWdkEpCsiznSy2JjBTGMf+xlgWnaRUQ
iI0nl7BdAIJCotF0OYee62TkehIVHeiAMCbwcFocAuwxFMxvASdxySjYn2QOUao9AQQzUw2EhFMb
Wn+Ki4xDOGRiIGYmM4l2MkBWUHN1azIeRxuIc2l3YAUiSaoEeqVFqCUFsjwGCwgDQ54LsCEuk2hD
Ckm7UZIgAK0XgTNvPzOFOYkTAs8bVA0LH9KN3N0TEQA7

------=_NextPart_000_0071_01CC4B21.DFBC3800
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: http://download.oracle.com/docs/cd/B19306_01/dcommon/gifs/index.gif

R0lGODlhGAAYAPMAMf////f//+fn79be587O3rXGzqW1zqWtvZStvYScrXuMpXOElGN7jEJacwAA
AAAAACwAAAAAGAAYAEAEsRDISau9TRQiyB4gQQBEswxCxTANM7btuy6LkFKDCO78flsZRCKxMCyG
C4StlBhdntCo9Nlw3lK/TkMJFCAQhS/CECYMSCZbJQPICBoSN7xU+00EBoPtkC/YxGB2U4OEhYYU
Ky2JK4yKDIJxBAYKCwoGRAoMCWdvj0AiCZoEmDQFAG8nglV4Y3gGY2OnJhxrLw23cbdwqLQUDXpV
bSjBVQWzkEgGA0RESkJHTZCH09SDEQA7

------=_NextPart_000_0071_01CC4B21.DFBC3800
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: http://download.oracle.com/docs/cd/B19306_01/dcommon/gifs/masterix.gif

R0lGODlhGAAYAPMAMf///+fv99be573O3py1zoylvXOUrWOEnEprjDFScyFCYxAxSgAYKQAACAAA
AAAAACwAAAAAGAAYAEAE4xDISau1gpxTQJjfBzAIwxQiMSDI0b6uARwPYiSypQRiMAjAoADxOFAG
hYViyUwsEbMHYYHLARQPxmOZzXIZCqrVQkAoEmZEgbBuEwyCSngxMSuZXNoCJTGIPD9CQEQMYlYE
ASprBIyNHQcMOAkFBXEAHQADJgsCSVkSNDYXo6SlpqdhRgBmeEwLRRcCGxw9EiIGJH8Ae5YegkFF
Dwt+EgVmaApqlMvLW1PEAAQe0yAUuCZVIpimoQXZEj8GlGzMawC4kzgDE9KnJZJjyWYP9Fz1rDgX
BQdnZwlKTpwogXKq4IQIADs=

------=_NextPart_000_0071_01CC4B21.DFBC3800
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: http://download.oracle.com/docs/cd/B19306_01/dcommon/gifs/feedbck2.gif

R0lGODlhGAAYAPMAMf////f39+/v997n787W57XG1pStvWuEpVJzjEJjhClKaxg5WhgxUggYMQAA
AAAAACwAAAAAGAAYAEAEwBDISautRQEx05jDgDRGcYGDsgDfsCTIYRyyQVhCcWhAstynSSGh+SQE
goRncBAtZqXTRxIqFAicoGXx5GS1h5Vg2gOMFIYvS1JodDSIFYA228nGFhWVBzA0YnVRQXE6MjIE
iFqKi4yMAwZKT40sGVgICGYIVgNqFAZiH0gUIwkmFg0FLSwKoWsDSgYGFQQ+awhwR480IiSmIAkS
HHJ8AAuXsb4UPlMfBcY00IIWIlMKMdElyVIAOsidk9/bIDgVEQA7

------=_NextPart_000_0071_01CC4B21.DFBC3800
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: http://download.oracle.com/docs/cd/B19306_01/dcommon/gifs/leftnav.gif

R0lGODlhGAAYAPMAMf/////3/+/v/+fv997v59bW1rW9xq293pytvYylvXuMrXOEnGOEpVJrlEJj
ewAAACwAAAAAGAAYAEAE1xBIIAQgJp9MKrUTYHQhlTQOUoqLIQlGsQpLKk+Gk4QCcoCrCQGBuEkI
hBDC0UgwUiuCY8HrjQqWSsGwbBSDl03FYyEcNskSLF0iLA4lg8IlGfFODIZ3pquzJQUJDk8qJUuF
Igl0YBRyNoxbCgs1kzF/QTAaa2dojBgHJGoCGHZxpWolBQoqIAY/UYcrCgoTryEECQuEKwZ7IkA9
DXk1iBM0VAAJQAAFSwzEKwV9zLbGCg5QIQULDXQCoGALRsxMBsscyzwGlOPGMEQIk0uUMYxtzAIy
6RMRADs=

------=_NextPart_000_0071_01CC4B21.DFBC3800
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: http://download.oracle.com/docs/cd/B19306_01/dcommon/gifs/rightnav.gif

R0lGODlhGAAYAPMAMf/////3/+/n3uf3/97n987W1r3e56293q21xpSMvYyltWuEnFqEnFpre0Jj
ewAAACwAAAAAGAAYAEAE2xDICQgp5yBsKS2IBxQNsxTi0CTT5hUOQ4jC0qDSgCCz6CEJnEQxEMEW
C4Yj0Rs6mgOBYVMoFgm7hWMR8uk0A0IRMBgcCkHfzkM4+QQK1rA5ISVNAo+ikceIEA1aCx0TKgtj
AggHdHkecEpCHmEFCkiBCwoFdD4jGgYHBgVTGmKcAIooY2xoVY48pj9pOa8UCFubEggMOLS1MQxM
qgBwgwAHjbUlSUhCAwq7xpG5DCZbkTU3Fb3TMWU/DkQSWIwJXRQ1S8KsyJJoDQ3mbFPlCwlINivS
pgL8AqmcEQA7

------=_NextPart_000_0071_01CC4B21.DFBC3800
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: http://download.oracle.com/docs/cd/B19306_01/server.102/b14223/dwhsg116.gif

R0lGODdhgwH7AfcAAAAAAAAAPwAAfwAAwAAA/wAqAAAqPwAqfwAqwAAq/wBVAABVPwBVfwBVwABV
/wB/AAB/PwB/fwB/wAB//wCqAACqPwCqfwCqwACq/wDVAADVPwDVfwDVwADV/wD/AAD/PwD/fwD/
wAD//yoAACoAPyoAfyoAwCoA/yoqACoqPyoqfyoqwCoq/ypVACpVPypVfypVwCpV/yp/ACp/Pyp/
fyp/wCp//yqqACqqPyqqfyqqwCqq/yrVACrVPyrVfyrVwCrV/yr/ACr/Pyr/fyr/wCr//1UAAFUA
P1UAf1UAwFUA/1UqAFUqP1Uqf1UqwFUq/1VVAFVVP1VVf1VVwFVV/1V/AFV/P1V/f1V/wFV//1Wq
AFWqP1Wqf1WqwFWq/1XVAFXVP1XVf1XVwFXV/1X/AFX/P1X/f1X/wFX//38AAH8AP38Af38AwH8A
/38qAH8qP38qf38qwH8q/39VAH9VP39Vf39VwH9V/39/AH9/P39/f39/wH9//3+qAH+qP3+qf3+q
wH+q/3/VAH/VP3/Vf3/VwH/V/3//AH//P3//f3//wH///6oAAKoAP6oAf6oAwKoA/6oqAKoqP6oq
f6oqwKoq/6pVAKpVP6pVf6pVwKpV/6p/AKp/P6p/f6p/wKp//6qqAKqqP6qqf6qqwKqq/6rVAKrV
P6rVf6rVwKrV/6r/AKr/P6r/f6r/wKr//9UAANUAP9UAf9UAwNUA/9UqANUqP9Uqf9UqwNUq/9VV
ANVVP9VVf9VVwNVV/9V/ANV/P9V/f9V/wNV//9WqANWqP9Wqf9WqwNWq/9XVANXVP9XVf9XVwNXV
/9X/ANX/P9X/f9X/wNX///8AAP8AP/8Af/8AwP8A//8qAP8qP/8qf/8qwP8q//9VAP9VP/9Vf/9V
wP9V//9/AP9/P/9/f/9/wP9///+qAP+qP/+qf/+qwP+q///VAP/VP//Vf//VwP/V////AP//P///
f///wP////8AAP8AP/8Af/8AwAAAACoqKlVVVX9/f6qqqtXV1f///ywAAAAAgwH7AQAI/wD/CRxI
sKDBgwgTKlzIsKHDhxAjSpxIsaLFixgzatzIsaPHjyBDihxJsqTJkyhTqlzJsqXLlzBjypxJs6bN
mzhz6tzJs6fPn0CDCh1KtKjRo0iTKl3KtKnTp1CjSp1KtarVq1gF5us3UF8+ifkq8uvnMF/RfAfz
jcxHMF/WrBrz8RuYLx/KfA/zdcx3Mt/BfBDzPcxHMF/WrB3z7RPYb1++f/zy5ev3Tx+/fPn8/dPH
L18+f//4/dO3L18/gfry8dNXcF++fP705eNHcF++fAL35cvn718+gfkE5vunb18+f/ny9ROob1++
fv705cvnb6C+fPz+7cuXzx9Bf/ry5f/zp49fvnz+/unj5+8fv3z5/P3jly9fP4H68vHL98+fPoD5
8vn7l29fvn7/+An09+8fP4H+/unLx+/fv3/8BPr790/fvnz99OXj94+fvnz8/vH794+fQH/+9An0
9y8fwH8CBxIsaPAgwoQKFzJs6PAhxIgSJ/7Lx8/fv3398vnb989fvn/59v3zt+9fvn3//O37l+9f
vn7+8v3bt+8fv3wE9+37x2/fv3wE+e3712/fvn3/+O37l09gPoH5/uXz5y+fP3/5BObr5y9fPn//
9u0jmO/fvn3/+O0jmM/fv3378u3752/fv3z8/vHT98/fPn/7/vnL92/fvn/88v3L5+//3759//L5
85ePn75//vb946fvn799AvMN5Kfvn799AvP185fvXz6B+f7lE5jvHz99//zty+fv3759FClSpEiR
IkWKFBvm88fvX75/+QT665fvX76B+f7lG5jvX75/+QTm+5dvYD6C+Qbm+5ePYL6B/vINzPcvn8B8
AvP9yycQYL5///L9+5fv3798+fj5A/hP4MB8//INzDfwXz5+/gTmG5jvXz6B+fgJ1CfQX798//IN
zPcvHz9/A/MJzJePn0B9//LxE6hPYL6B+fgJ1Ccwn8B8//IJzPcvn8B8//LxE6gvHz9/AP8JHEiw
oMGDCBMqXMiwocOHECNKnFgw3z99//32/cvXTx+/fvn+5RuY71++gfn+5fuXT2C+f/kG5iOYb2C+
f/kI5iOYb2C+f/kE5hOY718+gfkE5hOYT2C+f/z25eNHMN+/fAPzFeS3Lx+/fAPz/csnEGA+gQL7
6ePXL9+/fP/+/cv37x+/ffn4/cv379/Agf8GCvz3L9+/f/8GCvz3L9+/f/n+5fv3L9+/fP/+5fs3
UOA/fvvy8QP4T+BAggUNHkSYUOFChg0dPoQYUeLEgfn+7dPX71++fP7++cv3L9++f/7y/cu375+/
fP/y/csnMN8/ffz+9ctHUN++f/30/ctHUB+/f/706dv3r5++f/kE5vvXL9+/fALzCf/MJzCfwHz8
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
fvny9ROYT2C+f/705cvn7x+/fPn8/csH8J/AgQQLGjyIMKHChQwbOnwIMaLEiRQrJuQHMJ9Agfz/
AP4TODDfwIH5/uUTmE9gvnz7/vnbJzCfwHwC8w3ct+8fv30C8w38l8/fv3378u3752/fv3z8/vHT
98/fPn/7/vnL92/fvn/88v3L5+/fvn3/8vnzl4+fvn/+9v3jp++fv33/8g38x2/fv377/uXzt++f
v3wC8wnM9y+fv3/79vHT98/fPoD/BA4kWNDgQYQJFS5k2NDhQ4gRJU6kWJEhwHwCBQL8J3Dgv3wE
Beb7l09gPoH58g3MJzCfwHwC8w3MNzCfwHwE8/HzJzDfwHz/8gnMx0+gPoH++uX7l29gvn/5+Pkb
mE9gvnz8BOr7l4+fQH3/8hHMN9Dfv3wC/fXL/ycwn8B8//Lx8ycwHz+B+gD+EziQYEGDBxEmVLiQ
YUOHDyFGlDiRYkWG/PLly8fvoL5+BPvp+5dPYD6B+fINzCcwn8B8AvMNzDcwn8B8Bfnty8cv38B8
//IJBJhPoMB++vj1y/cv379///L9+8dvXz5+//L9+zdw4L+BAv/l+/fv3798AP8JFJivnz5+/fIJ
zCcwn0B++/LxA5hPoECA/wQOJFjQ4EGECRUuZNjQ4UOIESVOpFixYb58+RD2y9dPYL98/v7l+9cv
n8B8+fb985dPYL5//fIJzDdQ375//fQJzEeQ38B8+fb985fvXz6B+vgJ3JfP3z9/+f7p2/evX/++
f/wG5vuXT2A+ffwE7vunj5/Aff/yEdTH758/ff/y5fP3z18+gfn+9cv3j9/AfPr4Cdxn0aJFixYt
WrRo0aJFgf3y8UvYT1++fPv8CdyXT58+gfny6cuXr5/Affn06ROYj59Af/ry5fMnMB/Bfvny5euX
T1++fP3+5RPoT1++fP345cu3L58/f/ry6dP3r1++fPn6/csnMJ8/ffny9fvnT1++fP3+5eM30J++
fPn8/cvHL1++ffn8/duXTx9Aff/65cuXr58/ffny9fuXD+A/gQMJFjR4EGFChQsZNnT4EGJEiRMp
VmSoz+LAfBYX5rNo0aJFixYtWrRo0aJFixb/LVrMZ3FhPosWLVq0aNGiRYsWLVq0aNGiRYsWLVq0
aNGiRYsWLVq0aNGiwH79APoTOJBgQYMHESZU2I+fQoUKFSpUqFAhQX4KFSpUqFChQoP8FCpUqFCh
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
UqdSrWr1KtasWrdyXRkQADs7

------=_NextPart_000_0071_01CC4B21.DFBC3800
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: http://download.oracle.com/docs/cd/B19306_01/server.102/b14223/dwhsg120.gif

R0lGODlh9AE3AvcAAMnIyJGPkFpXWFpXV+fn6MjHx5GPj7y9wK2srPLy8uTk5NbW1j87PExJSjEt
LnZzdISBgmhlZp+dnru6ukxJSfHx8ba1tjAtLT47O6yrq3Vzc+Pj49XV1YOBgZ6dnbq5uWdlZVRR
Ut7e4IWDhM3O0O7v7/r6++7u78zNz93e38DBw9XV129ucJWVmMTFx9ra20dEReXm53h2d/b298DB
xElGSMjJy52cnerq69zc3sbHyqmoqS8rLGxqa5+fotHS1GBdXvv7+7KzttDR09nZ24KBhDs4Oc7O
z+bm6MLBwnl3etXW2PLy89na3Orr68TFyOLi5IB+f8nJzKiprMLCxPPz8z88PuTk5W1qa9DQ0ouK
jCwoKrS0tpqYmeHi41xaXMTEx62tr+Hh4/f3976/wr+/wWNgYX18fqSio8HCxczMz5mYmmVkZmhm
Z3Z0ddTU1rq7vZycnVJQUsDAwTYyNFFOT97f4Nva28/Q0To2N4iGh+Tj47Cvsa2rq3d2d8rKy4yL
jsfHydbX2YmIicXExdvb3NPU1Y2Li9LR0puZmsnKzIiHibe2t7a3ubW1t7++wMvLzdLS1JOSk7e3
uM/O0Ly8vYyKi5OSlNHQ0aCgosPCw6urrYSDg1pWV6emp+np6YSCg4aFh2NhYs7P0XNyc8nIybm5
uyMfIP///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH5BAAAAAAALAAAAAD0ATcC
AAj/AFEJHEiwoMGDCBMqXMiwocOHECNKnEixosWLGDNq3Mixo8ePIEOKHEmypMmTKFOqXMmypcuX
MGPKnEmzpk2KAQIoQKUgJ6oFDwRI4Jkz5wKBCIoGQICq6M6bUKNKnUq1atUHpx6ggpA1gQMJABro
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
nMCEXMvpnM/JnL4JndNJjgEBADs=

------=_NextPart_000_0071_01CC4B21.DFBC3800
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: http://download.oracle.com/docs/cd/B19306_01/dcommon/gifs/oracle.gif

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
YBsNhSg3JeqRgAAAOw==

------=_NextPart_000_0071_01CC4B21.DFBC3800
Content-Type: text/css;
	charset="gb2312"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://download.oracle.com/docs/cd/B19306_01/dcommon/css/blafdoc.css

BODY {
	FONT-SIZE: small; COLOR: black; FONT-FAMILY: Tahoma, sans-serif; =
BACKGROUND-COLOR: white
}
* HTML BODY {
	FONT-SIZE: small
}
H1 {
	FONT-WEIGHT: bold; FONT-SIZE: 160%; WIDTH: 100%; BORDER-BOTTOM: #ddd =
1px solid
}
H2 {
	FONT-WEIGHT: bold; FONT-SIZE: 130%
}
H3 {
	FONT-WEIGHT: bold; FONT-SIZE: 110%
}
H4 {
	FONT-WEIGHT: bold; FONT-SIZE: 100%
}
H5 {
	DISPLAY: inline; FONT-WEIGHT: bold
}
H6 {
	DISPLAY: inline; FONT-WEIGHT: bold; FONT-STYLE: italic
}
A:link {
	COLOR: #039
}
A:visited {
	COLOR: #72007c
}
A:hover {
	TEXT-DECORATION: underline
}
A IMG {
	BORDER-TOP-STYLE: none; BORDER-RIGHT-STYLE: none; BORDER-LEFT-STYLE: =
none; BORDER-BOTTOM-STYLE: none
}
IMG[usemap] {
	BORDER-TOP-STYLE: none; BORDER-RIGHT-STYLE: none; BORDER-LEFT-STYLE: =
none; BORDER-BOTTOM-STYLE: none
}
CODE {
	FONT-SIZE: 110%; FONT-FAMILY: monospace
}
PRE {
	FONT-SIZE: 110%; FONT-FAMILY: monospace
}
SAMP {
	FONT-SIZE: 110%; FONT-FAMILY: monospace
}
TT {
	FONT-SIZE: 110%; FONT-FAMILY: monospace
}
CAPTION {
	FONT-WEIGHT: bold; WIDTH: auto; TEXT-ALIGN: center
}
DT {
	FONT-WEIGHT: bold
}
TABLE {
	FONT-SIZE: small
}
TD {
	VERTICAL-ALIGN: top
}
TH {
	FONT-WEIGHT: bold; VERTICAL-ALIGN: bottom; TEXT-ALIGN: left
}
OL OL {
	LIST-STYLE-TYPE: lower-alpha
}
OL OL OL {
	LIST-STYLE-TYPE: lower-roman
}
TD P:first-child {
	MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px
}
TD PRE:first-child {
	MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px
}
TABLE.table-border {
	BORDER-TOP: #ccc 1px solid; BORDER-LEFT: #ccc 1px solid; =
BORDER-COLLAPSE: collapse
}
TABLE.table-border TH {
	BORDER-RIGHT: #ccc 1px solid; PADDING-RIGHT: 0.25em; PADDING-LEFT: =
0.25em; PADDING-BOTTOM: 0.5ex; COLOR: black; PADDING-TOP: 0.5ex; =
BORDER-BOTTOM: #ccc 1px solid; BACKGROUND-COLOR: #f7f7ea
}
TABLE.table-border TD {
	BORDER-RIGHT: #ccc 1px solid; PADDING-RIGHT: 0.25em; PADDING-LEFT: =
0.25em; PADDING-BOTTOM: 0.5ex; PADDING-TOP: 0.5ex; BORDER-BOTTOM: #ccc =
1px solid
}
SPAN.gui-object {
	FONT-WEIGHT: bold
}
SPAN.gui-object-action {
	FONT-WEIGHT: bold
}
SPAN.gui-object-title {
=09
}
P.horizontal-rule {
	BORDER-RIGHT: #cc9 0px solid; BORDER-TOP: #cc9 0px solid; =
MARGIN-BOTTOM: 4ex; BORDER-LEFT: #cc9 0px solid; WIDTH: 100%; =
BORDER-BOTTOM: #cc9 1px solid
}
DIV.zz-skip-header {
	DISPLAY: none
}
TD.zz-nav-header-cell {
	MARGIN-TOP: 0ex; FONT-WEIGHT: normal; FONT-SIZE: 95%; VERTICAL-ALIGN: =
top; WIDTH: 99%; COLOR: black; PADDING-TOP: 0ex; TEXT-ALIGN: left
}
A.zz-nav-header-link {
	FONT-SIZE: 95%
}
TD.zz-nav-button-cell {
	PADDING-RIGHT: 4px; MARGIN-TOP: 0ex; PADDING-LEFT: 4px; VERTICAL-ALIGN: =
top; WIDTH: 1%; PADDING-TOP: 0ex; WHITE-SPACE: nowrap; TEXT-ALIGN: =
center
}
A.zz-nav-button-link {
	FONT-SIZE: 90%
}
DIV.zz-nav-footer-menu {
	MARGIN-TOP: 2ex; MARGIN-BOTTOM: 4ex; WIDTH: 100%; TEXT-ALIGN: center
}
P.zz-legal-notice {
	FONT-SIZE: 85%
}
A.zz-legal-notice-link {
	FONT-SIZE: 85%
}
.bold {
	FONT-WEIGHT: bold
}
.codeinlinebold {
	FONT-WEIGHT: bold
}
.syntaxinlinebold {
	FONT-WEIGHT: bold
}
.term {
	FONT-WEIGHT: bold
}
.glossterm {
	FONT-WEIGHT: bold
}
.seghead {
	FONT-WEIGHT: bold
}
.glossaryterm {
	FONT-WEIGHT: bold
}
.keyword {
	FONT-WEIGHT: bold
}
.msg {
	FONT-WEIGHT: bold
}
.msgexplankw {
	FONT-WEIGHT: bold
}
.msgactionkw {
	FONT-WEIGHT: bold
}
.notep1 {
	FONT-WEIGHT: bold
}
.xreftitlebold {
	FONT-WEIGHT: bold
}
.italic {
	FONT-STYLE: italic
}
.codeinlineitalic {
	FONT-STYLE: italic
}
.syntaxinlineitalic {
	FONT-STYLE: italic
}
.variable {
	FONT-STYLE: italic
}
.xreftitleitalic {
	FONT-STYLE: italic
}
.bolditalic {
	FONT-WEIGHT: bold; FONT-STYLE: italic
}
.codeinlineboldital {
	FONT-WEIGHT: bold; FONT-STYLE: italic
}
.syntaxinlineboldital {
	FONT-WEIGHT: bold; FONT-STYLE: italic
}
.titleinfigure {
	FONT-WEIGHT: bold; FONT-STYLE: italic
}
.titleinexample {
	FONT-WEIGHT: bold; FONT-STYLE: italic
}
.titleintable {
	FONT-WEIGHT: bold; FONT-STYLE: italic
}
.titleinequation {
	FONT-WEIGHT: bold; FONT-STYLE: italic
}
.xreftitleboldital {
	FONT-WEIGHT: bold; FONT-STYLE: italic
}
.itemizedlisttitle {
	FONT-WEIGHT: bold
}
.orderedlisttitle {
	FONT-WEIGHT: bold
}
.segmentedlisttitle {
	FONT-WEIGHT: bold
}
.variablelisttitle {
	FONT-WEIGHT: bold
}
.bridgehead {
	FONT-WEIGHT: bold
}
.titleinrefsubsect {
	FONT-WEIGHT: bold
}
.subhead1 {
	DISPLAY: block; FONT-WEIGHT: bold; FONT-SIZE: 130%
}
.subhead2 {
	DISPLAY: block; FONT-WEIGHT: bold; FONT-SIZE: 110%
}
.subhead3 {
	DISPLAY: block; FONT-WEIGHT: bold
}
.underline {
	TEXT-DECORATION: underline
}
.superscript {
	VERTICAL-ALIGN: super
}
.subscript {
	VERTICAL-ALIGN: sub
}
.listofeft {
	BORDER-TOP-STYLE: none; BORDER-RIGHT-STYLE: none; BORDER-LEFT-STYLE: =
none; BORDER-BOTTOM-STYLE: none
}
.betadraft {
	COLOR: #f00
}
.alphabetanotice {
	COLOR: #f00
}
.revenuerecognitionnotice {
	COLOR: #f00
}
.betadraftsubtitle {
	FONT-WEIGHT: bold; COLOR: #f00; TEXT-ALIGN: center
}
.comment {
	FONT-WEIGHT: bold; COLOR: #080
}
.copyrightlogo {
	FONT-SIZE: 85%; TEXT-ALIGN: center
}
.tocsubheader {
	LIST-STYLE-TYPE: none
}
TABLE.icons TD {
	PADDING-RIGHT: 6px; PADDING-LEFT: 6px
}
.l1ix DD {
	MARGIN-TOP: 0ex; MARGIN-BOTTOM: 0ex
}
DD DL.l2ix {
	MARGIN-TOP: 0ex; MARGIN-BOTTOM: 0ex
}
DD DL.l3ix {
	MARGIN-TOP: 0ex; MARGIN-BOTTOM: 0ex
}
DIV.infoboxnote {
	PADDING-RIGHT: 0.25em; BORDER-TOP: gray 1pt solid; PADDING-LEFT: =
0.25em; PADDING-BOTTOM: 0.25em; MARGIN: 4ex 10%; PADDING-TOP: 0.25em; =
BORDER-BOTTOM: gray 1pt solid
}
DIV.infoboxnotewarn {
	PADDING-RIGHT: 0.25em; BORDER-TOP: gray 1pt solid; PADDING-LEFT: =
0.25em; PADDING-BOTTOM: 0.25em; MARGIN: 4ex 10%; PADDING-TOP: 0.25em; =
BORDER-BOTTOM: gray 1pt solid
}
DIV.infoboxnotealso {
	PADDING-RIGHT: 0.25em; BORDER-TOP: gray 1pt solid; PADDING-LEFT: =
0.25em; PADDING-BOTTOM: 0.25em; MARGIN: 4ex 10%; PADDING-TOP: 0.25em; =
BORDER-BOTTOM: gray 1pt solid
}
P.notep1 {
	MARGIN-TOP: 0px; MARGIN-BOTTOM: 0px
}
.tahiti-highlight-example {
	BACKGROUND: #ff9
}
.tahiti-highlight-search {
	BACKGROUND: #9cf
}
.tahiti-sidebar-heading {
	FONT-SIZE: 110%; MARGIN-BOTTOM: 0px; PADDING-BOTTOM: 0px
}

@media All   =20
{
DD {
	MARGIN-BOTTOM: 2ex
}
DL:first-child {
	MARGIN-TOP: 2ex
}

}

@media Print   =20
{
BODY {
	PADDING-RIGHT: 0px! important; PADDING-LEFT: 0px! important; FONT-SIZE: =
11pt; PADDING-BOTTOM: 0px! important; PADDING-TOP: 0px! important
}
A:link {
	COLOR: black
}
A:visited {
	COLOR: black
}
CODE {
	FONT-SIZE: 10pt
}
PRE {
	FONT-SIZE: 10pt
}
SAMP {
	FONT-SIZE: 10pt
}
TT {
	FONT-SIZE: 10pt
}
#nav {
	DISPLAY: none! important
}
#search_this_book {
	DISPLAY: none! important
}
#comment_form {
	DISPLAY: none! important
}
#comment_announcement {
	DISPLAY: none! important
}
#flipNav {
	DISPLAY: none! important
}
.noprint {
	DISPLAY: none! important
}
BODY#left-nav-present {
	OVERFLOW: visible! important
}

}

------=_NextPart_000_0071_01CC4B21.DFBC3800--
